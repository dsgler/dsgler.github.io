<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[main]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>main</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Sat, 05 Oct 2024 02:16:18 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sat, 05 Oct 2024 02:16:18 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[C中的浮点数与类型转换]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://www.bilibili.com/video/BV1Ni4y1j7rH/" rel="noopener" class="external-link" href="https://www.bilibili.com/video/BV1Ni4y1j7rH/" target="_blank"># 浮点数和类型转换</a><br>
<a data-tooltip-position="top" aria-label="https://www.bilibili.com/video/BV1Hm4y117H3/" rel="noopener" class="external-link" href="https://www.bilibili.com/video/BV1Hm4y117H3/" target="_blank"># 深入理解C语言浮点数类型 【C语言进阶必看】</a><br><img src="c语言学习\attachments\c中的浮点数与类型转换-20240928.jpg"><br>
<img src="c语言学习\attachments\c中的浮点数与类型转换-20240928-1.jpg"><br>这里给出一种查看浮点数二进制源码的方法<br>
<img src="c语言学习\attachments\c中的浮点数与类型转换-20240928.png"><br>
原理是将指针的类型转换，程序解释并打印为16进制。<br>int k=1;

for (int i=0;i&lt;100;i++){
    k*=2;
    printf("%d",k);
}
复制<br>这里会溢出为负数最大值 ,接着*2会变为<br>
继续乘将一直为0。<br>但是如果将代码改为<br>int k=1;

for (int i=0;i&lt;100;i++){
    k=k*2.0;
    printf("%d",k);
}
复制<br>把2改为2.0后，计算时会隐式转换为double,此时不会溢出，但重新变回int时会丢失精度。]]></description><link>c语言学习\c中的浮点数与类型转换.html</link><guid isPermaLink="false">C语言学习/C中的浮点数与类型转换.md</guid><pubDate>Thu, 03 Oct 2024 13:41:41 GMT</pubDate><enclosure url="c语言学习\attachments\c中的浮点数与类型转换-20240928.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;c语言学习\attachments\c中的浮点数与类型转换-20240928.jpg&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[C中的字符串]]></title><description><![CDATA[ 
 <br><br>
<br>字符串字面量
<br>char str="Hello,World!";
复制<br>这里 str 是一个 字符数组<br>
2. 指针<br>const char * str="Hello,World!";
复制<br>这里 str 是指向字符串头的指针<br>
3. 动态赋值<br>char str[20];
strcpy(str,"Helo,World!");
复制<br>注意，预定义长度应该大于字符串长度（末尾补'\0'）<br>
字符串不可直接修改，使用strcpy改变字符串(位于&lt;string.h&gt;中)<br><br>printf("%s\n",str);
复制<br>上面两种定义都可以用这种方法打印，因为printf是从头指针打印到'\0']]></description><link>c语言学习\c中的字符串.html</link><guid isPermaLink="false">C语言学习/C中的字符串.md</guid><pubDate>Thu, 03 Oct 2024 13:41:41 GMT</pubDate></item></channel></rss>