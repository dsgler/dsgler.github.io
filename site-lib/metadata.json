{"createdTime":1728095673448,"shownInTree":["c语言学习/attachments/函数式编程-尾递归优化-20241224.png","c语言学习/attachments/函数式编程-尾递归优化-20241224.html","c语言学习/attachments/内存与静态变量-20241214.png","c语言学习/attachments/内存与静态变量-20241214.html","c语言学习/attachments/内存与静态变量-20241214-1.png","c语言学习/attachments/内存与静态变量-20241214-1.html","c语言学习/attachments/c调用函数参数入栈顺序-20241015.jpg","c语言学习/attachments/c调用函数参数入栈顺序-20241015.html","c语言学习/attachments/c中的浮点数与类型转换-20240928.png","c语言学习/attachments/c中的浮点数与类型转换-20240928.html","c语言学习/attachments/c中的浮点数与类型转换-20240928.jpg","c语言学习/attachments/c中的浮点数与类型转换-20240928.html","c语言学习/attachments/c中的浮点数与类型转换-20240928-1.jpg","c语言学习/attachments/c中的浮点数与类型转换-20240928-1.html","c语言学习/attachments/const与指针-20241203.png","c语言学习/attachments/const与指针-20241203.html","c语言学习/构造函数.html","c语言学习/函数式编程.html","c语言学习/结构体的内存对齐.html","c语言学习/内存与静态变量.html","c语言学习/文件打开mode.html","c语言学习/字符.html","c语言学习/c的函数指针数组-逆天声明.html","c语言学习/c调用函数参数入栈顺序.html","c语言学习/c语言逆天题.html","c语言学习/c语言gcc编译与math.h的问题.html","c语言学习/c中的浮点数与类型转换.html","c语言学习/c中的字符串.html","c语言学习/const与指针.html","linux笔记/attachments/关于shell-20241017.png","linux笔记/attachments/关于shell-20241017.html","linux笔记/attachments/进程管理-20241015.png","linux笔记/attachments/进程管理-20241015.html","linux笔记/attachments/设备文件-20241020.png","linux笔记/attachments/设备文件-20241020.html","linux笔记/attachments/特殊权限-20241017.png","linux笔记/attachments/特殊权限-20241017.html","linux笔记/attachments/文件查看-20241017.png","linux笔记/attachments/文件查看-20241017.html","linux笔记/attachments/arch安装记（无u盘）-20241016.png","linux笔记/attachments/arch安装记（无u盘）-20241016.html","linux笔记/管道重定向.html","linux笔记/环境变量.html","linux笔记/进程管理.html","linux笔记/设备文件.html","linux笔记/特殊权限.html","linux笔记/文件查看.html","linux笔记/文件与文件夹的权限.html","linux笔记/ansi-转义序列.html","linux笔记/arch安装记（无u盘）.html","linux笔记/dd命令.html","linux笔记/diff的用法.html","linux笔记/docker权限去sudo.html","linux笔记/shell环境.html","linux笔记/shell知识.html","linux笔记/umask.html","linux笔记/vscode调试ts.html","react/关于react的响应式.html","react/环境配置.html","react/hooks.html","react/react-native的textinput.html","web学习/attachments/关于vue的响应式-20241118.jpg","web学习/attachments/关于vue的响应式-20241118.html","web学习/attachments/js的arguments-20241127.png","web学习/attachments/js的arguments-20241127.html","web学习/attachments/js的arguments-20241127-1.png","web学习/attachments/js的arguments-20241127-1.html","web学习/attachments/worker的性能统计-20241126.png","web学习/attachments/worker的性能统计-20241126.html","web学习/attachments/worker的性能统计-20241126-1.png","web学习/attachments/worker的性能统计-20241126-1.html","web学习/attachments/worker的性能统计-20241126-2.png","web学习/attachments/worker的性能统计-20241126-2.html","web学习/关于vue的响应式.html","web学习/一些奇怪的js写法.html","web学习/js的字符串和正则.html","web学习/js的arguments.html","web学习/worker的性能统计.html","index.html"],"attachments":["site-lib/fonts/94f2f163d4b698242fef.otf","site-lib/fonts/72505e6a122c6acd5471.woff2","site-lib/fonts/2d5198822ab091ce4305.woff2","site-lib/fonts/c8ba52b05a9ef10f4758.woff2","site-lib/fonts/cb10ffd7684cd9836a05.woff2","site-lib/fonts/b5f0f109bc88052d4000.woff2","site-lib/fonts/cbe0ae49c52c920fd563.woff2","site-lib/fonts/535a6cf662596b3bd6a6.woff2","site-lib/fonts/70cc7ff27245e82ad414.ttf","site-lib/fonts/454577c22304619db035.ttf","site-lib/fonts/52ac8f3034507f1d9e53.ttf","site-lib/fonts/05b618077343fbbd92b7.ttf","site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","site-lib/media/874d8b8e340f75575caa.svg","site-lib/media/3d6c1bdc4d87cde4de67.svg","site-lib/html/file-tree-content.html","site-lib/scripts/webpage.js","site-lib/media/favicon.png","site-lib/styles/obsidian.css","site-lib/styles/global-variable-styles.css","site-lib/styles/main-styles.css","site-lib/rss.xml","c语言学习/attachments/c中的浮点数与类型转换-20240928.jpg","c语言学习/attachments/c中的浮点数与类型转换-20240928.png","c语言学习/attachments/c中的浮点数与类型转换-20240928-1.jpg","c语言学习/attachments/c调用函数参数入栈顺序-20241015.jpg","linux笔记/attachments/关于shell-20241017.png","linux笔记/attachments/进程管理-20241015.png","linux笔记/attachments/特殊权限-20241017.png","linux笔记/attachments/文件查看-20241017.png","linux笔记/attachments/arch安装记（无u盘）-20241016.png","c语言学习/attachments/函数式编程-尾递归优化-20241224.png","c语言学习/attachments/内存与静态变量-20241214.png","c语言学习/attachments/内存与静态变量-20241214-1.png","c语言学习/attachments/const与指针-20241203.png","linux笔记/attachments/设备文件-20241020.png","web学习/attachments/关于vue的响应式-20241118.jpg","web学习/attachments/js的arguments-20241127.png","web学习/attachments/js的arguments-20241127-1.png","web学习/attachments/worker的性能统计-20241126.png","web学习/attachments/worker的性能统计-20241126-1.png","web学习/attachments/worker的性能统计-20241126-2.png","site-lib/scripts/graph-wasm.wasm","site-lib/scripts/graph-wasm.js","site-lib/scripts/graph-render-worker.js","site-lib/scripts/tinycolor.js","site-lib/scripts/pixi.js","site-lib/scripts/minisearch.js"],"allFiles":["react/react-native的textinput.html","react/hooks.html","react/环境配置.html","react/关于react的响应式.html","c语言学习/c语言逆天题.html","c语言学习/文件打开mode.html","c语言学习/构造函数.html","c语言学习/函数式编程.html","c语言学习/attachments/函数式编程-尾递归优化-20241224.png","c语言学习/attachments/函数式编程-尾递归优化-20241224.html","c语言学习/c的函数指针数组-逆天声明.html","c语言学习/内存与静态变量.html","c语言学习/attachments/内存与静态变量-20241214-1.png","c语言学习/attachments/内存与静态变量-20241214-1.html","c语言学习/attachments/内存与静态变量-20241214.png","c语言学习/attachments/内存与静态变量-20241214.html","c语言学习/结构体的内存对齐.html","c语言学习/const与指针.html","c语言学习/attachments/const与指针-20241203.png","c语言学习/attachments/const与指针-20241203.html","c语言学习/字符.html","linux笔记/vscode调试ts.html","web学习/js的字符串和正则.html","web学习/一些奇怪的js写法.html","web学习/js的arguments.html","web学习/attachments/js的arguments-20241127-1.png","web学习/attachments/js的arguments-20241127-1.html","web学习/attachments/js的arguments-20241127.png","web学习/attachments/js的arguments-20241127.html","web学习/worker的性能统计.html","web学习/attachments/worker的性能统计-20241126-2.png","web学习/attachments/worker的性能统计-20241126-2.html","web学习/attachments/worker的性能统计-20241126-1.png","web学习/attachments/worker的性能统计-20241126-1.html","web学习/attachments/worker的性能统计-20241126.png","web学习/attachments/worker的性能统计-20241126.html","web学习/关于vue的响应式.html","web学习/attachments/关于vue的响应式-20241118.jpg","web学习/attachments/关于vue的响应式-20241118.html","linux笔记/shell环境.html","linux笔记/shell知识.html","linux笔记/dd命令.html","linux笔记/docker权限去sudo.html","linux笔记/设备文件.html","linux笔记/attachments/设备文件-20241020.png","linux笔记/attachments/设备文件-20241020.html","linux笔记/ansi-转义序列.html","linux笔记/diff的用法.html","linux笔记/attachments/关于shell-20241017.png","linux笔记/attachments/关于shell-20241017.html","linux笔记/环境变量.html","linux笔记/文件查看.html","linux笔记/attachments/文件查看-20241017.png","linux笔记/attachments/文件查看-20241017.html","linux笔记/特殊权限.html","linux笔记/attachments/特殊权限-20241017.png","linux笔记/attachments/特殊权限-20241017.html","linux笔记/arch安装记（无u盘）.html","linux笔记/attachments/arch安装记（无u盘）-20241016.png","linux笔记/attachments/arch安装记（无u盘）-20241016.html","linux笔记/umask.html","linux笔记/文件与文件夹的权限.html","linux笔记/管道重定向.html","linux笔记/进程管理.html","linux笔记/attachments/进程管理-20241015.png","linux笔记/attachments/进程管理-20241015.html","c语言学习/c调用函数参数入栈顺序.html","c语言学习/attachments/c调用函数参数入栈顺序-20241015.jpg","c语言学习/attachments/c调用函数参数入栈顺序-20241015.html","c语言学习/c语言gcc编译与math.h的问题.html","c语言学习/c中的字符串.html","index.html","c语言学习/c中的浮点数与类型转换.html","c语言学习/attachments/c中的浮点数与类型转换-20240928.png","c语言学习/attachments/c中的浮点数与类型转换-20240928.html","c语言学习/attachments/c中的浮点数与类型转换-20240928-1.jpg","c语言学习/attachments/c中的浮点数与类型转换-20240928-1.html","c语言学习/attachments/c中的浮点数与类型转换-20240928.jpg","c语言学习/attachments/c中的浮点数与类型转换-20240928.html","site-lib/scripts/graph-wasm.wasm","site-lib/fonts/94f2f163d4b698242fef.otf","site-lib/fonts/72505e6a122c6acd5471.woff2","site-lib/fonts/2d5198822ab091ce4305.woff2","site-lib/fonts/c8ba52b05a9ef10f4758.woff2","site-lib/fonts/cb10ffd7684cd9836a05.woff2","site-lib/fonts/b5f0f109bc88052d4000.woff2","site-lib/fonts/cbe0ae49c52c920fd563.woff2","site-lib/fonts/535a6cf662596b3bd6a6.woff2","site-lib/fonts/70cc7ff27245e82ad414.ttf","site-lib/fonts/454577c22304619db035.ttf","site-lib/fonts/52ac8f3034507f1d9e53.ttf","site-lib/fonts/05b618077343fbbd92b7.ttf","site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","site-lib/media/874d8b8e340f75575caa.svg","site-lib/media/3d6c1bdc4d87cde4de67.svg","site-lib/html/file-tree-content.html","site-lib/scripts/webpage.js","site-lib/scripts/graph-wasm.js","site-lib/scripts/graph-render-worker.js","site-lib/scripts/tinycolor.js","site-lib/scripts/pixi.js","site-lib/scripts/minisearch.js","site-lib/media/favicon.png","site-lib/styles/obsidian.css","site-lib/styles/global-variable-styles.css","site-lib/styles/main-styles.css"],"webpages":{"c语言学习/attachments/c中的浮点数与类型转换-20240928.html":{"title":"C中的浮点数与类型转换--20240928","icon":"","description":"<img src=\"c语言学习/attachments/c中的浮点数与类型转换-20240928.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"c语言学习/attachments/c中的浮点数与类型转换-20240928.html","pathToRoot":"../..","attachments":["c语言学习/attachments/c中的浮点数与类型转换-20240928.html"],"createdTime":1727538515262,"modifiedTime":1727538515263,"sourceSize":448744,"sourcePath":"C语言学习/attachments/C中的浮点数与类型转换--20240928.png","exportPath":"c语言学习/attachments/c中的浮点数与类型转换-20240928.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"c语言学习/attachments/c中的浮点数与类型转换-20240928-1.html":{"title":"C中的浮点数与类型转换--20240928-1","icon":"","description":"<img src=\"c语言学习/attachments/c中的浮点数与类型转换-20240928-1.jpg\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"c语言学习/attachments/c中的浮点数与类型转换-20240928-1.html","pathToRoot":"../..","attachments":["c语言学习/attachments/c中的浮点数与类型转换-20240928-1.html"],"createdTime":1727538490577,"modifiedTime":1727538490578,"sourceSize":292256,"sourcePath":"C语言学习/attachments/C中的浮点数与类型转换--20240928-1.jpg","exportPath":"c语言学习/attachments/c中的浮点数与类型转换-20240928-1.html","showInTree":true,"treeOrder":0,"backlinks":["c语言学习/c中的浮点数与类型转换.html"],"type":"attachment"},"c语言学习/c中的浮点数与类型转换.html":{"title":"C中的浮点数与类型转换","icon":"","description":"<a data-tooltip-position=\"top\" aria-label=\"https://www.bilibili.com/video/BV1Ni4y1j7rH/\" rel=\"noopener\" class=\"external-link is-unresolved\" href=\"https://www.bilibili.com/video/BV1Ni4y1j7rH/\" target=\"_self\"># 浮点数和类型转换</a><br>\n<a data-tooltip-position=\"top\" aria-label=\"https://www.bilibili.com/video/BV1Hm4y117H3/\" rel=\"noopener\" class=\"external-link is-unresolved\" href=\"https://www.bilibili.com/video/BV1Hm4y117H3/\" target=\"_self\"># 深入理解C语言浮点数类型 【C语言进阶必看】</a><img src=\"c语言学习/attachments/c中的浮点数与类型转换-20240928.jpg\" target=\"_self\"><br>\n<img src=\"c语言学习/attachments/c中的浮点数与类型转换-20240928-1.jpg\" target=\"_self\">这里给出一种查看浮点数二进制源码的方法<br>\n<img src=\"c语言学习/attachments/c中的浮点数与类型转换-20240928.png\" target=\"_self\">\n原理是将指针的类型转换，程序解释并打印为16进制。int k=1; for (int i=0;i&lt;100;i++){ k*=2; printf(\"%d\",k);\n}\n复制这里会溢出为负数最大值 ,接着*2会变为\n继续乘将一直为0。但是如果将代码改为int k=1; for (int i=0;i&lt;100;i++){ k=k*2.0; printf(\"%d\",k);\n}\n复制把2改为2.0后，计算时会隐式转换为double,此时不会溢出，但重新变回int时会丢失精度。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"C中的浮点数与类型转换","level":1,"id":"C中的浮点数与类型转换"}],"links":[],"author":"","coverImageURL":"","fullURL":"c语言学习/c中的浮点数与类型转换.html","pathToRoot":"..","attachments":["c语言学习/attachments/c中的浮点数与类型转换-20240928.html","c语言学习/attachments/c中的浮点数与类型转换-20240928-1.html","c语言学习/attachments/c中的浮点数与类型转换-20240928.html"],"createdTime":1727538295885,"modifiedTime":1727962901201,"sourceSize":926,"sourcePath":"C语言学习/C中的浮点数与类型转换.md","exportPath":"c语言学习/c中的浮点数与类型转换.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"c语言学习/c中的字符串.html":{"title":"C中的字符串","icon":"","description":"\n字符串字面量\nchar str[]=\"Hello,World!\";\n复制这里 str 是一个 字符数组，它将存于 只读 内存区域的 字符串字面量 拷贝至数组中。\n2. 指针const char * str=\"Hello,World!\";\n复制这里 str 是指向字符串头的指针，因为指向只读区域，所以不可修改。\n3. 动态赋值char str[20];\nstrcpy(str,\"Helo,World!\");\n复制注意，预定义长度应该大于字符串长度（末尾补'\\0'，所以最少大1）。因为strcpy不会检查边界，所以超出后的行为是未定义的。\n字符串不可直接修改，使用strcpy改变字符串(位于&lt;string.h&gt;中)printf(\"%s\\n\",str);\n复制上面两种定义都可以用这种方法打印，因为printf是从头指针打印到'\\0'","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"C中的字符串","level":1,"id":"C中的字符串"},{"heading":"字符串的定义：","level":3,"id":"字符串的定义："},{"heading":"字符串的打印","level":3,"id":"字符串的打印"}],"links":[],"author":"","coverImageURL":"","fullURL":"c语言学习/c中的字符串.html","pathToRoot":"..","attachments":[],"createdTime":1725546694789,"modifiedTime":1728356597221,"sourceSize":813,"sourcePath":"C语言学习/C中的字符串.md","exportPath":"c语言学习/c中的字符串.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"index.html":{"title":"index","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"index","level":1,"id":"index"},{"heading":"你好","level":1,"id":"你好"}],"links":[],"author":"","coverImageURL":"","fullURL":"index.html","pathToRoot":".","attachments":[],"createdTime":1728014269757,"modifiedTime":1728014288974,"sourceSize":8,"sourcePath":"index.md","exportPath":"index.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"c语言学习/attachments/c调用函数参数入栈顺序-20241015.html":{"title":"C调用函数参数入栈顺序--20241015","icon":"","description":"<img src=\"c语言学习/attachments/c调用函数参数入栈顺序-20241015.jpg\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"c语言学习/attachments/c调用函数参数入栈顺序-20241015.html","pathToRoot":"../..","attachments":["c语言学习/attachments/c调用函数参数入栈顺序-20241015.html"],"createdTime":1728994481510,"modifiedTime":1728994481526,"sourceSize":225727,"sourcePath":"C语言学习/attachments/C调用函数参数入栈顺序--20241015.jpg","exportPath":"c语言学习/attachments/c调用函数参数入栈顺序-20241015.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"c语言学习/c调用函数参数入栈顺序.html":{"title":"C调用函数参数入栈顺序","icon":"","description":"<a href=\".?query=tag:汇编\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#汇编\">#汇编</a><br>\n<a data-tooltip-position=\"top\" aria-label=\"https://www.bilibili.com/video/BV1gC4y1b7y8?t=823.9&amp;p=3\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.bilibili.com/video/BV1gC4y1b7y8?t=823.9&amp;p=3\" target=\"_self\"># 汇编语言(基于Linux)</a>#include&lt;stdio.h&gt; int main(){ int i=3; printf(\"%d %d\",i++,i++);\n}\n复制在linux的gcc下，运行结果为4 3。\n汇编代码为\n32位：main:\n... # wdh.c:4: int i=3;\nmovl\t$3, -12(%ebp)\t# 将 3 存入局部变量 i\n# wdh.c:5: printf(\"%d %d\",i++,i++);\nmovl\t-12(%ebp), %ecx\t# 将局部变量 i 的值加载到 ecx\nleal\t1(%ecx), %edx\t# ecx + 1 的值加载到 edx (i++)\nmovl\t%edx, -12(%ebp)\t# 将 edx 的值存入局部变量 i\nmovl\t-12(%ebp), %edx\t# 将局部变量 i 的值加载到 edx\nleal\t1(%edx), %ebx\t# edx + 1 的值加载到 ebx (i++)\nmovl\t%ebx, -12(%ebp)\t# 将 ebx 的值存入局部变量 i\nsubl\t$4, %esp\t# 为第一个参数分配空间\npushl\t%ecx\t# 将第一个 i++ 的值压入栈\npushl\t%edx\t# 将第二个 i++ 的值压入栈\nleal\t.LC0@GOTOFF(%eax), %edx\t# 加载格式化字符串的地址到 edx\npushl\t%edx\t# 将格式化字符串的地址压入栈\nmovl\t%eax, %ebx\t# 将 eax 的值加载到 ebx\ncall\tprintf@PLT\t# 调用 printf 函数\naddl\t$16, %esp\t# 恢复栈空间\nmovl\t$0, %eax\t# 将 0 加载到 eax，表示返回值\n...\nret\t# 返回\n复制不难发现，参数从右向左入栈(pushl指令)64位：main:\n.LFB0: .cfi_startproc # 开始函数 endbr64 # 结束分支指令 pushq\t%rbp # 保存基址指针 .cfi_def_cfa_offset 16 # 定义 CFA 偏移量 .cfi_offset 6, -16 # 定义偏移量 movq\t%rsp, %rbp # 设置基址指针 .cfi_def_cfa_register 6 # 定义 CFA 寄存器 subq\t$16, %rsp # 为局部变量分配空间\n# wdh.c:4: int i=3; movl\t$3, -4(%rbp) # 将 3 存入局部变量 i\n# wdh.c:5: printf(\"%d %d\",i++,i++); movl\t-4(%rbp), %edx # 将局部变量 i 的值加载到 edx (第三个参数%rdx) leal\t1(%rdx), %eax # edx + 1 的值加载到 eax (i++) movl\t%eax, -4(%rbp) # 将 eax 的值存入局部变量 i movl\t-4(%rbp), %eax # 将局部变量 i 的值加载到 eax leal\t1(%rax), %ecx # eax + 1 的值加载到 ecx (i++) movl\t%ecx, -4(%rbp) # 将 ecx 的值存入局部变量 i movl\t%eax, %esi # 将 eax 的值加载到 esi (第一个 i++) (第二个参数%rsi) leaq\t.LC0(%rip), %rax # 加载格式化字符串的地址到 rax movq\t%rax, %rdi # 将 rax 的值加载到 rdi movl\t$0, %eax # 将 0 加载到 eax call\tprintf@PLT # 调用 printf 函数 movl\t$0, %eax # 将 0 加载到 eax\n复制在 x86-64 架构中，函数参数通过特定的寄存器传递，这是由 System V AMD64 ABI 规定的。根据该 ABI 规范，前六个整数或指针类型的参数通过以下寄存器传递：第一个参数：rdi\n第二个参数：rsi\n第三个参数：rdx\n第四个参数：rcx\n第五个参数：r8<br>\n第六个参数：r9<img src=\"c语言学习/attachments/c调用函数参数入栈顺序-20241015.jpg\" target=\"_self\">","aliases":[],"inlineTags":["#汇编"],"frontmatterTags":[],"headers":[{"heading":"C调用函数参数入栈顺序","level":1,"id":"C调用函数参数入栈顺序"}],"links":["?query=tag:%E6%B1%87%E7%BC%96"],"author":"","coverImageURL":"","fullURL":"c语言学习/c调用函数参数入栈顺序.html","pathToRoot":"..","attachments":["c语言学习/attachments/c调用函数参数入栈顺序-20241015.html"],"createdTime":1728992243017,"modifiedTime":1728994482912,"sourceSize":2889,"sourcePath":"C语言学习/C调用函数参数入栈顺序.md","exportPath":"c语言学习/c调用函数参数入栈顺序.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"c语言学习/c语言gcc编译与math.h的问题.html":{"title":"C语言gcc编译与math.h的问题","icon":"","description":"问题：在头文件引用math.h，使用sqrt()函数时提示未定义。\n搜索后发现需要手动在 编译 时加入-lm来链接库文件。据说是因为历史遗留问题。但是在简单一点的文件里，即使不引用math.h，也可以使用sqrt()，这和编译器优化有关。建议使用g++编译就没有这个问题了。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"C语言gcc编译与math.h的问题","level":1,"id":"C语言gcc编译与math.h的问题"}],"links":[],"author":"","coverImageURL":"","fullURL":"c语言学习/c语言gcc编译与math.h的问题.html","pathToRoot":"..","attachments":[],"createdTime":1728881053191,"modifiedTime":1728881352243,"sourceSize":365,"sourcePath":"C语言学习/C语言gcc编译与math.h的问题.md","exportPath":"c语言学习/c语言gcc编译与math.h的问题.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux笔记/attachments/关于shell-20241017.html":{"title":"关于shell--20241017","icon":"","description":"<img src=\"linux笔记/attachments/关于shell-20241017.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/attachments/关于shell-20241017.html","pathToRoot":"../..","attachments":["linux笔记/attachments/关于shell-20241017.html"],"createdTime":1729165478252,"modifiedTime":1729165478252,"sourceSize":345360,"sourcePath":"linux笔记/attachments/关于shell--20241017.png","exportPath":"linux笔记/attachments/关于shell-20241017.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"linux笔记/attachments/进程管理-20241015.html":{"title":"进程管理--20241015","icon":"","description":"<img src=\"linux笔记/attachments/进程管理-20241015.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/attachments/进程管理-20241015.html","pathToRoot":"../..","attachments":["linux笔记/attachments/进程管理-20241015.html"],"createdTime":1728997519511,"modifiedTime":1728997519512,"sourceSize":330892,"sourcePath":"linux笔记/attachments/进程管理--20241015.png","exportPath":"linux笔记/attachments/进程管理-20241015.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"linux笔记/attachments/特殊权限-20241017.html":{"title":"特殊权限--20241017","icon":"","description":"<img src=\"linux笔记/attachments/特殊权限-20241017.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/attachments/特殊权限-20241017.html","pathToRoot":"../..","attachments":["linux笔记/attachments/特殊权限-20241017.html"],"createdTime":1729160463443,"modifiedTime":1729160463444,"sourceSize":386939,"sourcePath":"linux笔记/attachments/特殊权限--20241017.png","exportPath":"linux笔记/attachments/特殊权限-20241017.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"linux笔记/attachments/文件查看-20241017.html":{"title":"文件查看--20241017","icon":"","description":"<img src=\"linux笔记/attachments/文件查看-20241017.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/attachments/文件查看-20241017.html","pathToRoot":"../..","attachments":["linux笔记/attachments/文件查看-20241017.html"],"createdTime":1729162018380,"modifiedTime":1729162018380,"sourceSize":343875,"sourcePath":"linux笔记/attachments/文件查看--20241017.png","exportPath":"linux笔记/attachments/文件查看-20241017.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"linux笔记/attachments/arch安装记（无u盘）-20241016.html":{"title":"Arch安装记（无U盘）--20241016","icon":"","description":"<img src=\"linux笔记/attachments/arch安装记（无u盘）-20241016.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/attachments/arch安装记（无u盘）-20241016.html","pathToRoot":"../..","attachments":["linux笔记/attachments/arch安装记（无u盘）-20241016.html"],"createdTime":1729092949052,"modifiedTime":1729092949052,"sourceSize":227761,"sourcePath":"linux笔记/attachments/Arch安装记（无U盘）--20241016.png","exportPath":"linux笔记/attachments/arch安装记（无u盘）-20241016.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"linux笔记/管道重定向.html":{"title":"管道重定向","icon":"","description":"&gt; 将输出到标准输出重定向到别的（如文件） （覆盖）\n&gt;&gt; （追加）&lt; 将输入到标准输入重定向到别的（如文件）wc &lt; tmoe.sh\n复制| 将前一个的标准输入接到后一个的标准输出ps aux | grep usr | wc\n复制xargs 将输入作为参数echo \"-a\" | xargs ls\n复制","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"管道重定向","level":1,"id":"管道重定向"}],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/管道重定向.html","pathToRoot":"..","attachments":[],"createdTime":1728998484238,"modifiedTime":1728999004426,"sourceSize":346,"sourcePath":"linux笔记/管道重定向.md","exportPath":"linux笔记/管道重定向.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux笔记/环境变量.html":{"title":"环境变量","icon":"","description":"$PATH:\n有先后顺序，\n出于安全考虑，当前目录不在$PATH下，可以手动添加（不建议）:PATH=$PATH:. ; export PATH\n复制","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"环境变量","level":1,"id":"环境变量"}],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/环境变量.html","pathToRoot":"..","attachments":[],"createdTime":1729164183868,"modifiedTime":1729164297283,"sourceSize":151,"sourcePath":"linux笔记/环境变量.md","exportPath":"linux笔记/环境变量.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux笔记/进程管理.html":{"title":"进程管理","icon":"","description":"<a data-tooltip-position=\"top\" aria-label=\"https://www.bilibili.com/video/BV19E411p7zn?t=177.4&amp;p=8\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.bilibili.com/video/BV19E411p7zn?t=177.4&amp;p=8\" target=\"_self\"># Linux操作系统</a>\n后台运行command &amp;\nnohup command &amp;\n复制nohup忽略用户退出是发送的SIGHUP信号查看进程ps aux\n复制杀死进程kill pid\nkillall pname\n复制kill默认发送 SIGTERM（信号编号为 15），给程序时间退出。<br>\n还可以使用kill -9强制退出。killall可以杀死同名的所有进程。<img src=\"linux笔记/attachments/进程管理-20241015.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"进程管理","level":1,"id":"进程管理"}],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/进程管理.html","pathToRoot":"..","attachments":["linux笔记/attachments/进程管理-20241015.html"],"createdTime":1728996672166,"modifiedTime":1728997559312,"sourceSize":471,"sourcePath":"linux笔记/进程管理.md","exportPath":"linux笔记/进程管理.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux笔记/特殊权限.html":{"title":"特殊权限","icon":"","description":" setuid（s）：文件所有者可以以文件所有者的权限执行该文件。 /bin/passwd运行时具有root的权限\n-rwsr-xr-x setgid（s）：文件所属组的用户可以以文件所属组的权限执行该文件。 locate运行时具有locate组权限 粘滞位（t）：只有文件所有者和超级用户可以删除或重命名该文件。 /tmp文件夹具有此权限 stat可以查看一个文件的状态\n<img src=\"linux笔记/attachments/特殊权限-20241017.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"特殊权限","level":1,"id":"特殊权限"},{"heading":"隐藏的文件属性：","level":2,"id":"隐藏的文件属性："}],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/特殊权限.html","pathToRoot":"..","attachments":["linux笔记/attachments/特殊权限-20241017.html"],"createdTime":1729159713591,"modifiedTime":1729160517993,"sourceSize":556,"sourcePath":"linux笔记/特殊权限.md","exportPath":"linux笔记/特殊权限.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux笔记/文件查看.html":{"title":"文件查看","icon":"","description":"head:\n查看头部几行\n-数字表示看几行tail:\n查看末尾几行\n-数字表示看几行\n-f 持续监视一个文件，可用于观察log输出od 以指定形式显示文件\n<img src=\"linux笔记/attachments/文件查看-20241017.png\" target=\"_self\">touch:\n创建文件，也可以用于修改文件时间戳。file:\n查看文件类型hexedit:\n查看文件头which\nwhereis\nlocatefind [路径] [匹配条件] [动作]\n复制路径默认为'.'\n-name 匹配名字，支持通配符，可能要加引号\n-type type：按文件类型查找，可以是&nbsp;f（普通文件）、d（目录）、l（符号链接）等。\n-size [+-]size[cwbkMG]：按文件大小查找，支持使用&nbsp;+&nbsp;或&nbsp;-&nbsp;表示大于或小于指定大小，单位可以是&nbsp;c（字节）、w（字数）、b（块数）、k（KB）、M（MB）或&nbsp;G（GB）。\n-mtime days：按修改时间查找，支持使用&nbsp;+&nbsp;或&nbsp;-&nbsp;表示在指定天数前或后，days 是一个整数表示天数。\n-user username：按文件所有者查找。\n-group groupname：按文件所属组查找。\n-perm 按权限查找\n后面可接-exec执行别的命令❯ find /usr/bin -perm /7000 -exec ls -l {} \\; -rwxr-sr-x 1 root crontab 39664 Mar 31 2024 /usr/bin/crontab\n-rwxr-sr-x 1 root shadow 27152 Apr 9 2024 /usr/bin/expiry\n-rwsr-xr-x 1 root root 40664 Apr 9 2024 /usr/bin/newgrp\n-rwsr-xr-x 1 root root 51584 Apr 9 2024 /usr/bin/mount\n-rwsr-xr-x 1 root root 55680 Apr 9 2024 /usr/bin/su\n-rwsr-xr-x 1 root root 72792 Apr 9 2024 /usr/bin/chfn\n-rwsr-xr-x 1 root root 277936 Apr 8 2024 /usr/bin/sudo\n-rwxr-sr-x 1 root shadow 72184 Apr 9 2024 /usr/bin/chage\n-rwsr-xr-x 1 root root 39296 Apr 9 2024 /usr/bin/umount\n-rwsr-xr-x 1 root root 64152 Apr 9 2024 /usr/bin/passwd\n-rwsr-xr-x 1 root root 39296 Apr 8 2024 /usr/bin/fusermount3\n-rwxr-sr-x 1 root _ssh 309688 Jul 9 19:31 /usr/bin/ssh-agent\n-rwsr-xr-x 1 root root 76248 Apr 9 2024 /usr/bin/gpasswd\n-rwsr-xr-x 1 root root 44760 Apr 9 2024 /usr/bin/chsh\n-rwxr-sr-x 1 root plocate 313912 Apr 19 01:53 /usr/bin/plocate\n复制{}表示全名，`;表示结束","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"文件查看","level":1,"id":"文件查看"},{"heading":"find","level":3,"id":"find"}],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/文件查看.html","pathToRoot":"..","attachments":["linux笔记/attachments/文件查看-20241017.html"],"createdTime":1729161770765,"modifiedTime":1729163832867,"sourceSize":2210,"sourcePath":"linux笔记/文件查看.md","exportPath":"linux笔记/文件查看.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux笔记/文件与文件夹的权限.html":{"title":"文件与文件夹的权限","icon":"","description":"文件：\nr: 可以读取此文件的实际内容，如读取文本文件的文字内容等，如 cp、cat、more、less\nw: 可以编辑、新增或者是修改该文件的内容（但不含删除该文件），如 nano、vi、ed\nx: 该文件具有可以被系统执行的权限\n目录：\nr: 具有读取目录结构列表的权限，可以用 ls 列出目录内容\nw: 具有修改目录结构列表的权限，包括：创建或删除文件或目录（无论文件权限为何），修改名称，移动文件或目录\nx: 代表用户能否进入该目录成为工作目录 文件用./执行和source执行相同\n用bash执行会开另一个执行 即使文件是不可写的，只要文件夹是可写的，就可以删除\n有w无r的情况下，可以创建和删除文件，但是不能查看文件\n只有x的情况下，只能进目录，什么也干不了\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"文件与文件夹的权限","level":1,"id":"文件与文件夹的权限"}],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/文件与文件夹的权限.html","pathToRoot":"..","attachments":[],"createdTime":1729049184682,"modifiedTime":1729049545654,"sourceSize":929,"sourcePath":"linux笔记/文件与文件夹的权限.md","exportPath":"linux笔记/文件与文件夹的权限.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux笔记/arch安装记（无u盘）.html":{"title":"Arch安装记（无U盘）","icon":"","description":"<a data-tooltip-position=\"top\" aria-label=\"https://blog.csdn.net/lxyoucan/article/details/124506518\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://blog.csdn.net/lxyoucan/article/details/124506518\" target=\"_self\"># 没有U盘纯硬盘安装linux之Ubuntu22.04</a><br>\n<a data-tooltip-position=\"top\" aria-label=\"https://blog.csdn.net/lxyoucan/article/details/124519765\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://blog.csdn.net/lxyoucan/article/details/124519765\" target=\"_self\"># 没有U盘纯硬盘安装linux之Archlinux</a>沿用之前的用xorboot引导多系统的方式，直接引导iso文件发现找不到iso文件，参考上面的教程后手动挂载iso，成功进入了安装界面。具体来说就是用grub引导，我直接用之前ubuntu的了，把grub.cfg改为menuentry 'archlinux' { insmod ntfs insmod iso9660 set isofile=\"/a.iso\"（文件位置） search --set -f $isofile loopback loop (hd0,gpt4)$isofile （文件磁盘） linux (loop)/arch/boot/x86_64/vmlinuz-linux archisolabel=ARCH_202410（标签） initrd (loop)/arch/boot/x86_64/initramfs-linux.img\n}\n复制其实我感觉主要就是要记住这个ARCH_202410，其他的反正也找不到，要手动挂载。报错Waiting 30 seconds for device /dev/disk/by-label/ARCH_202204，最终会失败。#创建将要挂载“E盘”的目录\nmkdir /iso\n#挂载/dev/nvme0n1p5 这里不同的电脑不一样，这个是指你存放iso文件的分区，根据实际情况修改\nmount /dev/nvme0n1p5 /iso\n#把iso文件虚拟成设备，就是存放文件的位置\nlosetup /dev/loop99 /iso/archlinux-2022.04.05-x86_64.iso\n复制\nmkdir必须先创建文件夹再挂载\nfindmnt可以查看挂载了哪些文件夹\n查看&nbsp;/dev/disk/by-label&nbsp;下是否有&nbsp;ARCH_202204文件夹，# 查询ARCH_202204是否存在\ncd /dev/disk/by-label\nls\n复制大概是没有的，手动创建软连接ln -s /dev/loop99 /dev/disk/by-label/ARCH_202204\nexit\n复制这里的label名字要和之前填的一样\nexit后，应该就会进入正常的安装界面了ls /sys/firmware/efi/efivars\n复制<br><img alt=\"check-efi\" src=\"linux笔记/attachments/arch安装记（无u盘）-20241016.png\" target=\"_self\">若输出了一堆东西（efi&nbsp;变量），则说明已在&nbsp;UEFI&nbsp;模式。否则请确认你的启动方式是否为&nbsp;UEFI。\narchlinux 的安装必须要求网络环境。\n使用&nbsp;iwctl&nbsp;进行连接：iwctl # 进入交互式命令行\ndevice list # 列出无线网卡设备名，比如无线网卡看到叫 wlan0\nstation wlan0 scan # 扫描网络\nstation wlan0 get-networks # 列出所有 wifi 网络\nstation wlan0 connect wifi-name # 进行连接，注意这里无法输入中文。回车后输入密码即可\nexit # 连接成功后退出\n复制连接后不会有提示，通过ping确认是否连上。使用&nbsp;timedatectl&nbsp;确保系统时间是准确的。这一步不是可选的，正确的系统时间对于部分程序来说非常重要：timedatectl set-ntp true # 将系统时间与网络时间进行同步\ntimedatectl status # 检查服务状态\n复制使用&nbsp;vim&nbsp;编辑器修改&nbsp;/etc/pacman.d/mirrorlist&nbsp;文件。将&nbsp;pacman&nbsp;软件仓库源更换为国内软件仓库镜像源：vim /etc/pacman.d/mirrorlist\n复制Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch # 中国科学技术大学开源镜像站\nServer = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch # 清华大学开源软件镜像站\nServer = https://repo.huaweicloud.com/archlinux/$repo/os/$arch # 华为开源镜像站\nServer = http://mirror.lzu.edu.cn/archlinux/$repo/os/$arch # 兰州大学开源\n复制这次只分了一个根目录lsblk显示磁盘情况。\nfdisk -l查看磁盘我们使用的分区工具是 fdisk，首先让我们通过查看帮助，学习一下 fdisk 的用法。root@archiso ~ # fdisk /dev/sda # 输入 fdisk 设备名，进入 fdisk 操作环境 Welcome to fdisk (util-linux 2.x).\nChanges will remain in memory only, until you decide to write them.\nBe careful before using the write command. # 执行写入命令（w）之前，硬盘不会被改动 Command (m for help): m # 输入 m 获取帮助 Help: … Generic d delete a partition # 输入 d 删除分区 n add a new partition # 输入 n 创建分区 p print the partition table # 输入 p 打印分区表 t change a partition type # 输入 t 改变分区类型 … Save &amp; Exit w write table to disk and exit # 输入 w 写入并退出（写入后不可撤销，请谨慎使用） q quit without saving changes # 输入 q 不保存退出 … Create a new label g create a new empty GPT partition table # 输入 g 创建 GPT 分区表 …\n复制提前预留好空间，直接n一路回车，p查看一下，w写入。然后格式化:mkfs.ext4 /dev/nvme0n1p5\n复制mount /dev/nvme0n1p5 /mnt\nmount --mkdir /dev/nvme0n1p5 /mnt/boot\n复制pacstrap -K /mnt base linux linux-firmware\n复制genfstab -U /mnt &gt;&gt; /mnt/etc/fstab\n复制看一眼：cat /mnt/etc/fstab\n复制我们使用 arch-chroot 工具切换到新安装的系统，以后的操作就可以在新安装的系统中完成了。root@archiso ~ # arch-chroot /mnt\n复制我们设置时区的软链接。在中国的读者请使用上海时间，在其他地区的读者可以在输入“/usr/share/zoneinfo/”之后按下Tab键查看可选的时区。[root@archiso ~]# ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n复制然后，设置硬件时间。[root@archiso ~]# hwclock --systohc\n复制<br>我们将设置 locale<a data-href=\"26\" href=\"26\" class=\"internal-link is-unresolved\" target=\"_self\" rel=\"noopener nofollow\">26</a>(<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://zhuanlan.zhihu.com/p/596227524#ref_26\" target=\"_self\">https://zhuanlan.zhihu.com/p/596227524#ref_26</a>)&nbsp;、终端键盘布局和字体<a data-href=\"27\" href=\"27\" class=\"internal-link is-unresolved\" target=\"_self\" rel=\"noopener nofollow\">27</a>(<a data-tooltip-position=\"top\" aria-label=\"https://zhuanlan.zhihu.com/p/596227524#ref_27)%E3%80%82locale\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://zhuanlan.zhihu.com/p/596227524#ref_27)%E3%80%82locale\" target=\"_self\">https://zhuanlan.zhihu.com/p/596227524#ref_27)。locale</a> 决定了系统的语言和格式，包括终端显示哪种语言，数字、时间和货币以哪国的格式显示等等。首先使用 Arch Linux 强大的包管理器 pacman 安装两个软件包。包管理器 pacman 是 Arch Linux 的核心特征之一，可以自动解决依赖问题，十分方便。它具有强大的功能，不过现在只需要学习安装软件包的方法。使用 pacman 安装软件包需要利用 -S（--sync）选项，这个选项的意思是同步的数据库，请初学者牢记。[root@archiso ~]# pacman -S vim terminus-font\n复制vim 是著名的文本编辑器，而 terminus-font 是终端字体。我们输入以下命令，利用 vim 编辑 /etc/locale.gen。[root@archiso ~]# vim /etc/locale.gen\n复制输入“/”，进入搜索功能，输入“en_US.UTF-8”，我们找到了以下一行。#en_US.UTF-8 UTF-8\n复制按下&nbsp;Enter，此时光标的位置在这一行的“e”的位置。按方向左键，再输入“x”，将这一行开头的“#”删除。en_US.UTF-8 UTF-8\n复制再一次输入“/”，进入搜索功能，输入“zh_CN.UTF-8”，按下Enter。按方向左键，再输入“x”，将“#”删除。zh_CN.UTF-8 UTF-8\n复制随后输入“:”，进入命令模式，输入“wq”，按下Enter，保存并退出 vim 软件环境。接下来，输入如下命令，生成 locale。[root@archiso ~]# locale-gen\n复制我们再使用 vim 创建并编辑 locale.conf，设置 locale。[root@archiso ~]# vim /etc/locale.conf\n复制这是一个空文件。进入 vim 程序环境时，默认进入了命令模式，此时无法插入字符。我们首先按下“i”键，进入插入模式。请输入如下字符。LANG=en_US.UTF-8\n复制<br>请编辑 hostname文件，设置主机名。这将成为您计算机的名字。<a data-tooltip-position=\"top\" aria-label=\"https://link.zhihu.com/?target=https%3A//www.rfc-editor.org/rfc/rfc1178\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://link.zhihu.com/?target=https%3A//www.rfc-editor.org/rfc/rfc1178\" target=\"_self\">这篇文章</a>为设置主机名提供了一些建议。[root@archiso ~]# vim /etc/hostname\n----------------------------------\n我的主机名\n复制然后，请安装一个网络管理器，笔者推荐使用 NetworkManager。[root@archiso ~]# pacman -S networkmanager\n复制NetworkManager 附带一个守护程序。在 Arch Linux 中，守护程序由 systemd 管理。systemd 是非常重要的系统程序，我们在下一篇文章中会详细介绍它的用法。现在我们使用 systemd 设置 NetworkManager 开机自动启动。[root@archiso ~]# systemctl enable NetworkManager.service\n复制nmtui图形化界面顺手安个显卡驱动吧sudo pacman -S mesa lib32-mesa xf86-video-amdgpu vulkan-radeon lib32-vulkan-radeon\n复制先给root设置个密码吧passwd root\n复制先把windows的EFI分区挂载上来：mkdir /mnt/efi\nmount /dev/nvme0n1p1 /mnt/efi\nmkdir /mnt/efi/EFI/arch\n复制然后安装grubpacman -S grub efibootmgr\n复制grub-install --target=x86_64-efi --efi-directory=/mnt/efi/EFI/arch --bootloader-id=Arch\n复制安装位置和名字随意。生成配置文件：grub-mkconfig -o /mnt/efi/grub.cfg\n复制到时候再把这个cfg放到grub的同级目录下。exit #退出chroot\numount -a #解挂载\nreboot\n复制再进windows里xorboot配置一下就好了，图形化界面什么的是后话。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Arch安装记（无U盘）","level":1,"id":"Arch安装记（无U盘）"},{"heading":"0.手动挂载","level":2,"id":"0.手动挂载"},{"heading":"1.确认是否为 UEFI 模式​","level":2,"id":"1.确认是否为_UEFI_模式[​](https//arch.icekylin.online/guide/rookie/basic-install#_2-%E5%86%8D%E6%AC%A1%E7%A1%AE%E8%AE%A4%E6%98%AF%E5%90%A6%E4%B8%BA-uefi-%E6%A8%A1%E5%BC%8F)"},{"heading":"2.连接网络","level":2,"id":"2.连接网络"},{"heading":"若使用无线连接​","level":3,"id":"若使用**无线连接**[​](https//arch.icekylin.online/guide/rookie/basic-install#%E8%8B%A5%E4%BD%BF%E7%94%A8%E6%97%A0%E7%BA%BF%E8%BF%9E%E6%8E%A5)"},{"heading":"3.更新系统时钟​","level":2,"id":"3.更新系统时钟[​](https//arch.icekylin.online/guide/rookie/basic-install#_5-%E6%9B%B4%E6%96%B0%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F)"},{"heading":"4.更换国内软件仓库镜像源加快下载速度​","level":2,"id":"4.更换国内软件仓库镜像源加快下载速度[​](https//arch.icekylin.online/guide/rookie/basic-install#_6-%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E8%BD%AF%E4%BB%B6%E4%BB%93%E5%BA%93%E9%95%9C%E5%83%8F%E6%BA%90%E5%8A%A0%E5%BF%AB%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6)"},{"heading":"5.分区和格式化","level":2,"id":"5.分区和格式化"},{"heading":"6.安装基础包","level":2,"id":"6.安装基础包"},{"heading":"7.挂载fstab","level":2,"id":"7.挂载fstab"},{"heading":"8.chroot","level":2,"id":"8.chroot"},{"heading":"9.时区","level":2,"id":"9.时区"},{"heading":"10.本地化","level":2,"id":"10.本地化"},{"heading":"10.1 设置 locale","level":3,"id":"10.1_设置_locale"},{"heading":"11.网络配置","level":2,"id":"11.网络配置"},{"heading":"12.配置grub","level":2,"id":"12.配置grub"},{"heading":"13.安装结束","level":2,"id":"13.安装结束"}],"links":["26","27"],"author":"","coverImageURL":"","fullURL":"linux笔记/arch安装记（无u盘）.html","pathToRoot":"..","attachments":["linux笔记/attachments/arch安装记（无u盘）-20241016.html"],"createdTime":1729091538265,"modifiedTime":1729094899986,"sourceSize":9886,"sourcePath":"linux笔记/Arch安装记（无U盘）.md","exportPath":"linux笔记/arch安装记（无u盘）.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux笔记/umask.html":{"title":"umask","icon":"","description":"umask（user file creation mask）是Unix和类Unix操作系统中的一个概念，它是一个系统设置，用于控制新文件和目录的默认权限。umask值定义了文件系统创建文件和目录时默认应该屏蔽掉的权限位。在Unix系统中，文件和目录的权限通常用三组数字表示，分别对应所有者（owner）、组（group）和其他用户（others）的读（r）、写（w）和执行（x）权限。每组权限可以用三位二进制数表示，其中1表示允许，0表示禁止。umask值是一个八进制数，它告诉系统在创建新文件或目录时应该屏蔽掉哪些权限。umask的值是从文件和目录的默认权限（通常是666和777）中减去的，因此，如果umask设置为022，那么新创建的文件默认权限将是644（666-022），新创建的目录的默认权限将是755（777-022）。例如：\n如果umask设置为002，那么新创建的文件将有权限666（读/写），新创建的目录将有权限777（读/写/执行）。\n如果umask设置为022，那么新创建的文件将有权限644（读/写），新创建的目录将有权限755（读/写/执行）。\numask可以通过命令行设置，也可以在用户的shell配置文件（如.bashrc或.profile）中设置，以影响用户的默认行为。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"umask","level":1,"id":"umask"}],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/umask.html","pathToRoot":"..","attachments":[],"createdTime":1729049704850,"modifiedTime":1729049711720,"sourceSize":1344,"sourcePath":"linux笔记/umask.md","exportPath":"linux笔记/umask.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"c语言学习/attachments/函数式编程-尾递归优化-20241224.html":{"title":"函数式编程-尾递归优化--20241224","icon":"","description":"<img src=\"c语言学习/attachments/函数式编程-尾递归优化-20241224.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"c语言学习/attachments/函数式编程-尾递归优化-20241224.html","pathToRoot":"../..","attachments":["c语言学习/attachments/函数式编程-尾递归优化-20241224.html"],"createdTime":1735044808571,"modifiedTime":1735044808572,"sourceSize":100302,"sourcePath":"C语言学习/attachments/函数式编程-尾递归优化--20241224.png","exportPath":"c语言学习/attachments/函数式编程-尾递归优化-20241224.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"c语言学习/attachments/内存与静态变量-20241214.html":{"title":"内存与静态变量--20241214","icon":"","description":"<img src=\"c语言学习/attachments/内存与静态变量-20241214.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"c语言学习/attachments/内存与静态变量-20241214.html","pathToRoot":"../..","attachments":["c语言学习/attachments/内存与静态变量-20241214.html"],"createdTime":1734162735965,"modifiedTime":1734162735965,"sourceSize":323620,"sourcePath":"C语言学习/attachments/内存与静态变量--20241214.png","exportPath":"c语言学习/attachments/内存与静态变量-20241214.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"c语言学习/attachments/内存与静态变量-20241214-1.html":{"title":"内存与静态变量--20241214-1","icon":"","description":"<img src=\"c语言学习/attachments/内存与静态变量-20241214-1.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"c语言学习/attachments/内存与静态变量-20241214-1.html","pathToRoot":"../..","attachments":["c语言学习/attachments/内存与静态变量-20241214-1.html"],"createdTime":1734162832771,"modifiedTime":1734162832773,"sourceSize":159574,"sourcePath":"C语言学习/attachments/内存与静态变量--20241214-1.png","exportPath":"c语言学习/attachments/内存与静态变量-20241214-1.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"c语言学习/attachments/const与指针-20241203.html":{"title":"const与指针--20241203","icon":"","description":"<img src=\"c语言学习/attachments/const与指针-20241203.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"c语言学习/attachments/const与指针-20241203.html","pathToRoot":"../..","attachments":["c语言学习/attachments/const与指针-20241203.html"],"createdTime":1733207163940,"modifiedTime":1733207163942,"sourceSize":296583,"sourcePath":"C语言学习/attachments/const与指针--20241203.png","exportPath":"c语言学习/attachments/const与指针-20241203.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"c语言学习/构造函数.html":{"title":"构造函数","icon":"","description":"\n下列情况中，不会调用复制构造函数的是（&nbsp;&nbsp;&nbsp; ）。\n(A)用一个对象去初始化同一类的另一个新对象时\n(B)将类的一个对象赋值给该类的另一个对象时\n(C)函数的形参是类的对象，调用函数进行形参和实参结合时\n(D)函数的返回值是类的对象，函数执行返回调用时\n答案：B\n答案解析：A,C，D分别对应调用复制构造函数的三种情况，见ppt课件\nB是赋值，赋值前，两个对象已经构造好，不会再调用复制构造函数A a();\n// A A aa(a);\n// 与A等价\nA aa=a; //B 这里先声明过，故调用的是operator=的重载\nA aa();\naa=a; // C我猜是说传参不穿指针,显然是会复制的\nf(a); // D可能会尾调用优化，但不考虑，会复制，销毁原来的，再返回新的\nf(){ A a(); return a;\n} ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"构造函数","level":1,"id":"构造函数"}],"links":[],"author":"","coverImageURL":"","fullURL":"c语言学习/构造函数.html","pathToRoot":"..","attachments":[],"createdTime":1735046980601,"modifiedTime":1735047341537,"sourceSize":860,"sourcePath":"C语言学习/构造函数.md","exportPath":"c语言学习/构造函数.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"c语言学习/函数式编程.html":{"title":"函数式编程","icon":"","description":"<a href=\".?query=tag:汇编\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#汇编\">#汇编</a> 试用函数式风格改写该函数，要求使用尾递归<br>\n<img src=\"c语言学习/attachments/函数式编程-尾递归优化-20241224.png\" target=\"_self\">\n应该是FP为了解决函数调用太多爆栈的问题，有几种优化，如尾调用优化先给出我的实现：#include &lt;limits.h&gt; int _maxInIntArr(int *arr, int size, int max)\n{ if (size == 0) { return max; } max = arr[0] &gt; max ? arr[0] : max; return _maxInIntArr(arr + 1, size - 1, max);\n} // 包装一下\nint maxInIntArr(int *arr, int size)\n{ return _maxInIntArr(arr, size, INT_MIN);\n}\n其核心思想是不使用局部变量，让上一步传入的参数接着进入下一步中，在寄存器上转移。但是通过观测，发现变量的地址实际上减小了，通过汇编解释\n这里通过 gcc -c -g -Wa,-adlhn -O2 fp.c &gt; fpO2.asm生成夹杂汇编和c的代码\n（我怀疑汇编代码和直接执行的并不完全相同） ... 26 0008 4883EC10 subq\t$16, %rsp 27 000c 48897DF8 movq\t%rdi, -8(%rbp) 28 0010 8975F4 movl\t%esi, -12(%rbp) 29 0013 8955F0 movl\t%edx, -16(%rbp) ...\n显然把传入的参数又放到栈上了，多余 ... 24 000b 4883EC08 subq\t$8, %rsp ... 45 0022 4883C408 addq\t$8, %rsp ...\n可以看到确实是在寄存器上传递，没有压栈，那这个8又是用来干什么的呢？<br>\n<a data-tooltip-position=\"top\" aria-label=\"https://blog.csdn.net/m0_50525151/article/details/129668147\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://blog.csdn.net/m0_50525151/article/details/129668147\" target=\"_self\"># call指令和ret指令【笔记+详解】</a>\nAI回答是为了对齐，在call的时候会把下一行的地址压栈(8byte)，根据Linux x86-64 ABI，在调用一个函数之前，rsp 必须是 16 字节对齐 的，故压8byte来对齐完全没有操作栈，让AI变回C代码后发现递归变成循环了特点：\n纯函数，相同入参返回值相同，无副作用（不修改其他变量），方便调试，可并发\n柯里化(Haskell Brooks Curry) 通过闭包和高阶函数，让多个参数分多次传入，方便调试 ","aliases":[],"inlineTags":["#汇编"],"frontmatterTags":[],"headers":[{"heading":"函数式编程","level":1,"id":"函数式编程"},{"heading":"尾递归优化","level":2,"id":"尾递归优化"},{"heading":"在O0优化下","level":3,"id":"在`O0`优化下"},{"heading":"在O1优化下","level":3,"id":"在`O1`优化下"},{"heading":"在O2优化下","level":3,"id":"在`O2`优化下"},{"heading":"概念相关","level":2,"id":"概念相关"}],"links":["?query=tag:%E6%B1%87%E7%BC%96"],"author":"","coverImageURL":"","fullURL":"c语言学习/函数式编程.html","pathToRoot":"..","attachments":["c语言学习/attachments/函数式编程-尾递归优化-20241224.html"],"createdTime":1735044772034,"modifiedTime":1735046799909,"sourceSize":2103,"sourcePath":"C语言学习/函数式编程.md","exportPath":"c语言学习/函数式编程.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"c语言学习/结构体的内存对齐.html":{"title":"结构体的内存对齐","icon":"","description":" 第一个成员在与结构体变量偏移量为0的地址处，其他成员变量要对齐到某个数字（对齐数）的整数倍的地址处 对齐数 = 编译器默认的一个对齐数 与 该成员大小的较小值。\nVS中默认的值为8、Linux环境默认不设对齐数（对齐数是结构体成员自身的大小）】 结构体总大小为最大对齐数（每个成员变量都有一个对齐数）的整数倍 如果嵌套了结构体的情况，嵌套的结构体对齐到自己的最大对齐数的整数倍处，结构体的整体大小就是所有最大对齐数（含嵌套结构体的对齐数）的整数倍 例如struct st\n{ char c; int i; short s;\n};\nc在offset=0处，大小为1；\ni大小为4，故对齐到offfset=4处，c后空3位；\ns大小为2，直接放在offset=8处；\n结构体现在大小为1(+3)+4+2=10，对齐到4的整数倍12","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"结构体的内存对齐","level":1,"id":"结构体的内存对齐"},{"heading":"规则","level":3,"id":"规则"}],"links":[],"author":"","coverImageURL":"","fullURL":"c语言学习/结构体的内存对齐.html","pathToRoot":"..","attachments":[],"createdTime":1728992219962,"modifiedTime":1734143180034,"sourceSize":940,"sourcePath":"C语言学习/结构体的内存对齐.md","exportPath":"c语言学习/结构体的内存对齐.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"c语言学习/内存与静态变量.html":{"title":"内存与静态变量","icon":"","description":"<img src=\"c语言学习/attachments/内存与静态变量-20241214.png\" target=\"_self\">内核空间： 放置操作系统相关的代码和数据。（用户不能直接进行操作 ------ 可以通过调用系统提供的 api 函数）\n栈又叫堆栈，非静态局部变量/函数参数/返回值等等，栈是向下增长的。\n内存映射段是高效的I/O映射方式，用于装载一个共享的 动态内存库。用户可使用系统接口创建共享共享内存，做进程间通信。\n堆用于程序运行时动态内存分配，堆是可以上增长的。\n数据段–存储全局数据和静态数据。\n代码段–可执行的代码/只读常量。\n<br><img src=\"c语言学习/attachments/内存与静态变量-20241214-1.png\" target=\"_self\">\n栈：系统自动分配的空间，只要不特殊声明，就定义在栈区，函数的区域也在栈上。栈是向下增长的。 函数中声明的const 在栈里 堆：使用动态内存分配的方式可以申请堆空间，用完要手动释放。\n全局区：全局变量、静态变量（static） 注意，static只会初始赋值一次 常量区：代码中的数字，字符等常量，例如’a’，—1.2等\n代码区：存放可执行代码，避免频繁的读硬盘。\n例如：int f(){ static int y=999; y++; return y;\n}\n对y的赋值只会进行一次，所以每次调用返回的结果是不同的。int f2(){ const int h=888; int *p=(int *)&amp;h; *p=2; return h;\n}\n显然，这种const是给编译器检查的const，但是gcc甚至懒得检查（具体表现为const int 是可以被转换为int ），所以返回值是2\n在g++就会修改失败，返回888","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"内存与静态变量","level":1,"id":"内存与静态变量"},{"heading":"内存分布说明","level":3,"id":"内存分布说明"},{"heading":"内存区域：栈、堆、全局区、常量区、代码区","level":3,"id":"内存区域：栈、堆、全局区、常量区、代码区"}],"links":[],"author":"","coverImageURL":"","fullURL":"c语言学习/内存与静态变量.html","pathToRoot":"..","attachments":["c语言学习/attachments/内存与静态变量-20241214.html","c语言学习/attachments/内存与静态变量-20241214-1.html"],"createdTime":1734162599602,"modifiedTime":1734163719424,"sourceSize":1757,"sourcePath":"C语言学习/内存与静态变量.md","exportPath":"c语言学习/内存与静态变量.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"c语言学习/文件打开mode.html":{"title":"文件打开mode","icon":"","description":"\nw+打开也不能读取之前的内容了\na修改不了之前的内容的\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"文件打开mode","level":1,"id":"文件打开mode"}],"links":[],"author":"","coverImageURL":"","fullURL":"c语言学习/文件打开mode.html","pathToRoot":"..","attachments":[],"createdTime":1735047475001,"modifiedTime":1735047772575,"sourceSize":1255,"sourcePath":"C语言学习/文件打开mode.md","exportPath":"c语言学习/文件打开mode.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"c语言学习/字符.html":{"title":"字符","icon":"","description":"\n解释'\\0xa'的结果是30817\n首先，一个''里只应该放一个字符，这么写本身就是不规范的char ch1=0141;\nchar ch2='\\141'\nchar ch3='a';\n上面三种写法是等价的\n第二种写法只能写八进制但是''里也可以出现多个字符\n此时的表现：'abc'==((long long)'a'&lt;&lt;16) + ((long long)'b'&lt;&lt;8) + (long long)'c';\n那么回答开头的问题，实际上被看成3个字符\n\\0,x,a八进制和十六进制都必须在范围内\n对于没有实际意义的转义，如\\p，应视为错误。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"字符","level":1,"id":"字符"}],"links":[],"author":"","coverImageURL":"","fullURL":"c语言学习/字符.html","pathToRoot":"..","attachments":[],"createdTime":1733204871677,"modifiedTime":1733206074743,"sourceSize":1056,"sourcePath":"C语言学习/字符.md","exportPath":"c语言学习/字符.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"c语言学习/c的函数指针数组-逆天声明.html":{"title":"C的函数指针数组-逆天声明","icon":"","description":"#include &lt;stdio.h&gt; // *是指返回值是指针\n// c中是不能直接返回数组的，只能返回数组的指针\nint (*pf())[5]\n{ static int arr[5] = {1, 2, 3, 4, 5}; return &amp;arr;\n} int main()\n{ // 这里是函数指针数组 // (*p[1]) 是对p的具体描述，即指针数组 // 外面是对函数的描述，copy即可 int(*(*p[1])())[5] = {pf}; int(*arr)[5] = p[0](); printf(\"%d\\n\", (*arr)[2]);\n} ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"C的函数指针数组-逆天声明","level":1,"id":"C的函数指针数组-逆天声明"}],"links":[],"author":"","coverImageURL":"","fullURL":"c语言学习/c的函数指针数组-逆天声明.html","pathToRoot":"..","attachments":[],"createdTime":1734439639017,"modifiedTime":1734439754031,"sourceSize":447,"sourcePath":"C语言学习/C的函数指针数组-逆天声明.md","exportPath":"c语言学习/c的函数指针数组-逆天声明.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"c语言学习/c语言逆天题.html":{"title":"C语言逆天题","icon":"","description":" typedef struct combotype { char c; // 1+3 int i; // 4 short h; // 2 // 2 整体对齐 } COMBO; sizeof(COMBO) == 12;\n参考：<a class=\"internal-link\" data-href=\"结构体的内存对齐.md\" href=\"c语言学习/结构体的内存对齐.html\" target=\"_self\" rel=\"noopener nofollow\">结构体的内存对齐</a>以下关系表达式中，表达式的值为 1 的是：[ B ]\nA、-6U&gt;-6L\nB、-6U == -6L\nC、-6U&lt;-6L\nD、-6U - 6L == 0\n32位系统，long是4byte\n有符号数和无符号数比较时都会看成无符号数,所以 -2U&lt;-1 <br>事实上，你不应该把有符号数和无符号数一起操作，它结果的类型取决与你希望它是什么\nint(pf(char))[5];\nB、pf 是一个函数 ，pf 的返回值是一个指向数组的指针；\n参考： <a class=\"internal-link\" data-href=\"C的函数指针数组-逆天声明.md\" href=\"c语言学习/c的函数指针数组-逆天声明.html\" target=\"_self\" rel=\"noopener nofollow\">C的函数指针数组-逆天声明</a> struct STR { int Num; char *String; } s = {1, \"ACEGK12345\"}, *p1 = &amp;s; int *p2 = (int *)p1-&gt;String; printf(\"%#x\\n\", *(int *)p1-&gt;String); // 0x47 45 43 41 // G E C A int大小为4tyte\n小端存储，低地址放低位\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"C语言逆天题","level":1,"id":"C语言逆天题"}],"links":["c语言学习/结构体的内存对齐.html","c语言学习/c的函数指针数组-逆天声明.html"],"author":"","coverImageURL":"","fullURL":"c语言学习/c语言逆天题.html","pathToRoot":"..","attachments":[],"createdTime":1735047388564,"modifiedTime":1735049834061,"sourceSize":1076,"sourcePath":"C语言学习/C语言逆天题.md","exportPath":"c语言学习/c语言逆天题.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"c语言学习/const与指针.html":{"title":"const与指针","icon":"","description":"<img src=\"c语言学习/attachments/const与指针-20241203.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"const与指针","level":1,"id":"const与指针"}],"links":[],"author":"","coverImageURL":"","fullURL":"c语言学习/const与指针.html","pathToRoot":"..","attachments":["c语言学习/attachments/const与指针-20241203.html"],"createdTime":1733207039434,"modifiedTime":1733207260321,"sourceSize":1718,"sourcePath":"C语言学习/const与指针.md","exportPath":"c语言学习/const与指针.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux笔记/attachments/设备文件-20241020.html":{"title":"设备文件--20241020","icon":"","description":"<img src=\"linux笔记/attachments/设备文件-20241020.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/attachments/设备文件-20241020.html","pathToRoot":"../..","attachments":["linux笔记/attachments/设备文件-20241020.html"],"createdTime":1729414466022,"modifiedTime":1729414466023,"sourceSize":377788,"sourcePath":"linux笔记/attachments/设备文件--20241020.png","exportPath":"linux笔记/attachments/设备文件-20241020.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"linux笔记/设备文件.html":{"title":"设备文件","icon":"","description":"<img src=\"linux笔记/attachments/设备文件-20241020.png\" target=\"_self\">/dev/loop可以用来访问iso这里先创建一个isogenisoimage -o cla.iso cla 为了访问，先把iso挂载再loop上（以下的命令需要su）:sudo losetup /dev/loop70 cla.iso\n哪个loop随意，只要没人用就行sudo mkdir /mnt/cla #创建用来挂载的文件夹\nsudo mount /dev/loop70 /mnt/cla\n然后就可以访问了sudo umount /mnt/cla #取消挂载\n其实可以一步到位sudo mount -o loop cla.iso /mnt/cla\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"设备文件","level":1,"id":"设备文件"}],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/设备文件.html","pathToRoot":"..","attachments":["linux笔记/attachments/设备文件-20241020.html"],"createdTime":1729414429780,"modifiedTime":1729414957960,"sourceSize":532,"sourcePath":"linux笔记/设备文件.md","exportPath":"linux笔记/设备文件.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux笔记/ansi-转义序列.html":{"title":"ANSI 转义序列","icon":"","description":"标准 Esc 代码以&nbsp;Escape&nbsp;为前缀：\nCtrl 快捷键:&nbsp;^[\n八进制:&nbsp;\\033\nUnicode:&nbsp;\\u001b\n十六进制:&nbsp;\\x1B\n十进制:&nbsp;27\n后面跟着命令，有时用左方括号（[）分隔，称为控制序列引导码（CSI），后面可选地跟着可选的参数和命令本身。参数通过分号（;）分隔，例如：\\x1b[1;31m # 设置样式为粗体，红字。\n如为了输出彩色的文字echo -e \"\\x1B[31mHello World\\x1B[0m\"\n这里的：\n\\x1B[: ansi escape code\n31m: 调用m函数(改变颜色)，其参数为31（可有多个参数，用;分隔。\nHello World: 内容\n\\x1B[0m: 表示结束还有很多其它功能，如控制光标。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"ANSI 转义序列","level":1,"id":"ANSI 转义序列"}],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/ansi-转义序列.html","pathToRoot":"..","attachments":[],"createdTime":1729413202464,"modifiedTime":1729413685049,"sourceSize":721,"sourcePath":"linux笔记/ANSI 转义序列.md","exportPath":"linux笔记/ansi-转义序列.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux笔记/dd命令.html":{"title":"dd命令","icon":"","description":"<a href=\".?query=tag:dd\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#dd\">#dd</a>dd if=/dev/zero of=myzero bs=1M count=4 status=progress\nif: input File\nof: output File\nbs: block size（块大小）\ncount: 块数量\nstatus=progress: 显示进度","aliases":[],"inlineTags":["#dd"],"frontmatterTags":[],"headers":[{"heading":"dd命令","level":1,"id":"dd命令"}],"links":["?query=tag:dd"],"author":"","coverImageURL":"","fullURL":"linux笔记/dd命令.html","pathToRoot":"..","attachments":[],"createdTime":1729910832743,"modifiedTime":1729910942409,"sourceSize":187,"sourcePath":"linux笔记/dd命令.md","exportPath":"linux笔记/dd命令.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux笔记/diff的用法.html":{"title":"diff的用法","icon":"","description":"diff old_file new_file\n显示两个文件的差别，表现为第一个文件经过操作变成第二个文件。diff -u old_file new_file\n另一种显示形式。将其输出存入文件，即可用patch修补文件。patch old_file patch\n即可获得新文件。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"diff的用法","level":1,"id":"diff的用法"}],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/diff的用法.html","pathToRoot":"..","attachments":[],"createdTime":1729343024137,"modifiedTime":1729343648329,"sourceSize":301,"sourcePath":"linux笔记/diff的用法.md","exportPath":"linux笔记/diff的用法.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux笔记/docker权限去sudo.html":{"title":"docker权限去sudo","icon":"","description":"\nCreate the docker group if it does not exist\n$ sudo groupadd docker Add your user to the docker group.\n$ sudo usermod -aG docker $USER\n把用户加入docker组即可。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"docker权限去sudo","level":1,"id":"docker权限去sudo"}],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/docker权限去sudo.html","pathToRoot":"..","attachments":[],"createdTime":1729431139197,"modifiedTime":1729431195453,"sourceSize":201,"sourcePath":"linux笔记/docker权限去sudo.md","exportPath":"linux笔记/docker权限去sudo.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux笔记/shell环境.html":{"title":"Shell环境","icon":"","description":"<img src=\"linux笔记/attachments/关于shell-20241017.png\" target=\"_self\"> bash 的配置文件 全局配置文件 /etc/profile\n/etc/profile.d/*.sh\n/etc/bashrc 个人配置文件 ~/.bash_profile\n~/.bashrc 由上可知，bash 的配置文件分别为profile 类文件和bashrc 类文件： profile 类文件作用： 1.设定环境变量。 2.运行命令或脚本（登录时运行的脚本）。 bashrc 类文件配置作用： 设定本地变量。 定义命令别名 登录式 shell&nbsp;读取配置&nbsp;文件过程： /etc/profile–&gt;/etc/profile.d/*.sh–&gt;~/.bash_profile–&gt;~/.bashrc–&gt;/etc/bashrc 非登录式 shell&nbsp;读取配置&nbsp;文件过程： ~/.bashrc–&gt;/etc/bashrc–&gt;/etc/prodile.d/*.sh 具体来说，\nbash a.sh是非登录的，不继承父进程的环境。\n./a.sh使用父进程的环境，在子进程中运行，类型取决于父进程，需要执行权限。\nsource或.直接在当前进程执行可以使用echo $SHLVL查看shell嵌套数量。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Shell环境","level":1,"id":"Shell环境"},{"heading":"了解两种方式之间的区别，就要先了解 shell 的配置文件：","level":3,"id":"**了解两种方式之间的区别，就要先了解_shell_的配置文件：**"},{"heading":"了解以上配置文件后，则：","level":3,"id":"**了解以上配置文件后，则：**"}],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/shell环境.html","pathToRoot":"..","attachments":["linux笔记/attachments/关于shell-20241017.html"],"createdTime":1729165472054,"modifiedTime":1729915886069,"sourceSize":1248,"sourcePath":"linux笔记/Shell环境.md","exportPath":"linux笔记/shell环境.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux笔记/shell知识.html":{"title":"Shell知识","icon":"","description":"\n赋值： key=value\n注意不要有空格，否则会被认为不是1条命令 字符串： \"$LANG\": 会进行变量替换\n'$LANG': 不会进行变量替换\na=`uname -r` : 反引号执行命令不可嵌套\na=$(uname -r): $()执行命令可嵌套 导出 export: 导出到环境变量，在子进程中也生效 read var: 获取输入设置为vardeclare:\n-i: 声明类型为数字\n-x: 设置为环境变量\n+x: 取消环境变量\n-r: 只读\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Shell知识","level":1,"id":"Shell知识"},{"heading":"变量","level":2,"id":"变量"}],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/shell知识.html","pathToRoot":"..","attachments":[],"createdTime":1729913561879,"modifiedTime":1729914770544,"sourceSize":516,"sourcePath":"linux笔记/Shell知识.md","exportPath":"linux笔记/shell知识.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux笔记/vscode调试ts.html":{"title":"Vscode调试ts","icon":"","description":"单文件调试\n创建.vscode/lauch.json{ \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Current TS File\", \"type\": \"node\", \"request\": \"launch\", \"program\": \"${workspaceRoot}/node_modules/ts-node/dist/bin.js\", \"args\": [ \"${relativeFile}\" ], \"cwd\": \"${workspaceRoot}\", \"protocol\": \"inspector\", } ]\n}\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Vscode调试ts","level":1,"id":"Vscode调试ts"}],"links":[],"author":"","coverImageURL":"","fullURL":"linux笔记/vscode调试ts.html","pathToRoot":"..","attachments":[],"createdTime":1729522195375,"modifiedTime":1732863862015,"sourceSize":456,"sourcePath":"linux笔记/Vscode调试ts.md","exportPath":"linux笔记/vscode调试ts.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"react/关于react的响应式.html":{"title":"关于React的响应式","icon":"","description":"核心useStateconst [thing,setThing]=useState(initValue)\nthing不应该被手动改变，不然会分离。\n调用set时，整个函数会重新执行，生成虚拟DOM，然后diff , patchsetNumber(number + 1);\nsetNumber(number + 1);\nsetNumber(number + 1);\n因为setNumber是在下一次重新渲染时生效的，所以三次的number都是1\n可以传入一个settersetNumber(n =&gt; n + 1);\nsetNumber(n =&gt; n + 1);\nsetNumber(n =&gt; n + 1);\n传入useState应该是不可变的，只能替换。\n对于 对象 和 数组 也是如此\n想修改，应该使用展开语法setPerson({ ...person, // 复制上一个 person 中的所有字段 firstName: e.target.value // 但是覆盖 firstName 字段 });\nsetArtists( // 替换 state [ // 是通过传入一个新数组实现的 ...artists, // 新数组包含原数组的所有元素 { id: nextId++, name: name } // 并在末尾添加了一个新的元素 ]\n);\n也可以用.slice先拷贝一遍（不是.splice）轮椅一点，可以用Immer库的useImmer替换useState，直接设置，由Immer解决剩下的","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"关于React的响应式","level":1,"id":"关于React的响应式"}],"links":[],"author":"","coverImageURL":"","fullURL":"react/关于react的响应式.html","pathToRoot":"..","attachments":[],"createdTime":1735020439523,"modifiedTime":1735056276692,"sourceSize":1165,"sourcePath":"React/关于React的响应式.md","exportPath":"react/关于react的响应式.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"react/环境配置.html":{"title":"环境配置","icon":"","description":"轮椅一点，使用expo\n主要是路由比较方便，也有一些现成的组件吧<a data-tooltip-position=\"top\" aria-label=\"https://docs.expo.dev/tutorial/create-your-first-app/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://docs.expo.dev/tutorial/create-your-first-app/\" target=\"_self\"># Create your first app</a>npx create-expo-app@latest\n不过在这之前，建议先运行一遍react-native<br><a data-tooltip-position=\"top\" aria-label=\"https://reactnative.cn/docs/environment-setup\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://reactnative.cn/docs/environment-setup\" target=\"_self\"># 搭建开发环境</a>\n先配个Andriod Studio , Java\n创建项目npx @react-native-community/cli init AwesomeProject --version X.XX.X\nversion似乎是必须的运行一下cd AwesomeProject\nyarn android\n鉴于Facebook的东西，就用一下yarn吧\n要开魔法，下很多东西没什么好说的，vscode即可yarn android预览，支持热重载\nUI库要专门找，组件也不同\nexpo的路由是基于文件的支持在线打包和本地打包# 安装\nyarn add eas-cli\n# 登录\neas login\n# 生成配置文件\neas build:configure\n修改eas.json，使打包为apk而不是aab\"preview\": { \"distribution\": \"internal\", \"android\": { \"buildType\": \"apk\" } },\n打包eas build --profile preview --platform android\n然后在浏览器下载官方的不支持windows\n这里expo prebuild\n生成andriod目录，然后进入，用rn打包npx react-native build-android --mode=release\n生成的好像是aab./gradlew assembleRelease&nbsp;for&nbsp;apk./gradlew bundleRelease&nbsp;for&nbsp;aabAPK&nbsp;will be located in&nbsp;android/app/build/outputs/apk/release/AAB&nbsp;will be located in&nbsp;android/app/build/outputs/bundle/release/打包出来的apk有80Mb，有点大，修改build.gradle文件使只打包一个架构，大小就只有1/4了android { ... splits { // 基于不同的abi架构配置不同的apk abi { // 必须为true，打包才会为不同的abi生成不同的apk enable true // 默认情况下，包含了所有的ABI。 // 所以使用reset()清空所有的ABI，再使用include指定我们想要生成的架构armeabi-v7a、arm-v8a reset() // 逗号分隔列表的形式指定 Gradle 应针对哪些 ABI 生成 APK。只与 reset() 结合使用，以指定确切的 ABI 列表。 // include \"armeabi-v7a\", \"arm64-v8a\" include \"arm64-v8a\" // 是否生成通用的apk，也就是包含所有ABI的apk。如果设为 true，那么除了按 ABI 生成的 APK 之外，Gradle 还会生成一个通用 APK。 universalApk false } }\n}\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"环境配置","level":1,"id":"环境配置"},{"heading":"安装","level":3,"id":"安装"},{"heading":"安装react-native","level":4,"id":"安装`react-native`"},{"heading":"开发","level":3,"id":"开发"},{"heading":"打包","level":3,"id":"打包"},{"heading":"使用esa在线打包","level":4,"id":"使用esa在线打包"},{"heading":"本地","level":4,"id":"本地"}],"links":[],"author":"","coverImageURL":"","fullURL":"react/环境配置.html","pathToRoot":"..","attachments":[],"createdTime":1735056392561,"modifiedTime":1735122155807,"sourceSize":2583,"sourcePath":"React/环境配置.md","exportPath":"react/环境配置.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"react/hooks.html":{"title":"Hooks","icon":"","description":"会重写渲染组件因为要求组件是纯函数，所以如果要修改的话最好放在useEffect（副作用）中\n第二个参数填dependencies，如果不填每次渲染都会执行（不建议）\n填[]只会在初次渲染执行\n填[a,b]会在a或b改变时执行\n注意对象的比较最好使用useMemo// 不应这样写，因为每次person作为object都是不同的\nlet person={a:a,b:b}; // 这样，只有a,b改变时才会改变person\nlet person=useMemo(()=&gt;{a:a,b:b},[a,b]);\n缓存传给子组件的回调函数","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Hooks","level":1,"id":"Hooks"},{"heading":"useState","level":2,"id":"useState"},{"heading":"useEffect","level":2,"id":"useEffect"},{"heading":"useMemo","level":2,"id":"useMemo"},{"heading":"useCallback","level":2,"id":"useCallback"}],"links":[],"author":"","coverImageURL":"","fullURL":"react/hooks.html","pathToRoot":"..","attachments":[],"createdTime":1735825154547,"modifiedTime":1735825832884,"sourceSize":600,"sourcePath":"React/Hooks.md","exportPath":"react/hooks.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"react/react-native的textinput.html":{"title":"react native的TextInput","icon":"","description":"只能用state获取value,ref不行","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"react native的TextInput","level":1,"id":"react native的TextInput"}],"links":[],"author":"","coverImageURL":"","fullURL":"react/react-native的textinput.html","pathToRoot":"..","attachments":[],"createdTime":1735825879983,"modifiedTime":1735825921114,"sourceSize":35,"sourcePath":"React/react native的TextInput.md","exportPath":"react/react-native的textinput.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"web学习/attachments/关于vue的响应式-20241118.html":{"title":"关于vue的响应式--20241118","icon":"","description":"<img src=\"web学习/attachments/关于vue的响应式-20241118.jpg\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"web学习/attachments/关于vue的响应式-20241118.html","pathToRoot":"../..","attachments":["web学习/attachments/关于vue的响应式-20241118.html"],"createdTime":1731942954229,"modifiedTime":1731942954229,"sourceSize":494374,"sourcePath":"web学习/attachments/关于vue的响应式--20241118.jpg","exportPath":"web学习/attachments/关于vue的响应式-20241118.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"web学习/attachments/js的arguments-20241127.html":{"title":"JS的arguments--20241127","icon":"","description":"<img src=\"web学习/attachments/js的arguments-20241127.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"web学习/attachments/js的arguments-20241127.html","pathToRoot":"../..","attachments":["web学习/attachments/js的arguments-20241127.html"],"createdTime":1732703428675,"modifiedTime":1732703428675,"sourceSize":22149,"sourcePath":"web学习/attachments/JS的arguments--20241127.png","exportPath":"web学习/attachments/js的arguments-20241127.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"web学习/attachments/js的arguments-20241127-1.html":{"title":"JS的arguments--20241127-1","icon":"","description":"<img src=\"web学习/attachments/js的arguments-20241127-1.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"web学习/attachments/js的arguments-20241127-1.html","pathToRoot":"../..","attachments":["web学习/attachments/js的arguments-20241127-1.html"],"createdTime":1732703544234,"modifiedTime":1732703544234,"sourceSize":9540,"sourcePath":"web学习/attachments/JS的arguments--20241127-1.png","exportPath":"web学习/attachments/js的arguments-20241127-1.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"web学习/attachments/worker的性能统计-20241126.html":{"title":"worker的性能统计--20241126","icon":"","description":"<img src=\"web学习/attachments/worker的性能统计-20241126.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"web学习/attachments/worker的性能统计-20241126.html","pathToRoot":"../..","attachments":["web学习/attachments/worker的性能统计-20241126.html"],"createdTime":1732621411348,"modifiedTime":1732621411348,"sourceSize":54672,"sourcePath":"web学习/attachments/worker的性能统计--20241126.png","exportPath":"web学习/attachments/worker的性能统计-20241126.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"web学习/attachments/worker的性能统计-20241126-1.html":{"title":"worker的性能统计--20241126-1","icon":"","description":"<img src=\"web学习/attachments/worker的性能统计-20241126-1.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"web学习/attachments/worker的性能统计-20241126-1.html","pathToRoot":"../..","attachments":["web学习/attachments/worker的性能统计-20241126-1.html"],"createdTime":1732621710008,"modifiedTime":1732621710009,"sourceSize":27970,"sourcePath":"web学习/attachments/worker的性能统计--20241126-1.png","exportPath":"web学习/attachments/worker的性能统计-20241126-1.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"web学习/attachments/worker的性能统计-20241126-2.html":{"title":"worker的性能统计--20241126-2","icon":"","description":"<img src=\"web学习/attachments/worker的性能统计-20241126-2.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"web学习/attachments/worker的性能统计-20241126-2.html","pathToRoot":"../..","attachments":["web学习/attachments/worker的性能统计-20241126-2.html"],"createdTime":1732622317488,"modifiedTime":1732622317488,"sourceSize":27481,"sourcePath":"web学习/attachments/worker的性能统计--20241126-2.png","exportPath":"web学习/attachments/worker的性能统计-20241126-2.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"web学习/关于vue的响应式.html":{"title":"关于vue的响应式","icon":"","description":"<a href=\".?query=tag:vue\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#vue\">#vue</a> <a href=\".?query=tag:ts\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#ts\">#ts</a><br><img src=\"web学习/attachments/关于vue的响应式-20241118.jpg\" target=\"_self\">\n大概是这么个关系，vue2的命名比较抽象。\nobserser就是一个 可观测对象 ，具体来说就是一个有__ob__属性的对象。\n__ob__是Observer类的一个实例，主要对getter和setter进行改写，还有就是存放一个dep的实例，dep下的subs[]数组存放了subscriber（在vue2的时候应该叫做DepTarget这个interface,具体其实只有watcher实现了）。\ndep有两个主要的方法：depend(){ if (Dep.target) { Dep.target.addDep(this) }\n}\n这里的Dep.target是将当前处理的watcher直接挂在全局的Dep上（注意是大写，是类本身）。notify(){ for (let i = 0, l = subs.length; i &lt; l; i++) { sub.update() }\n}\n这里再给出watcher那边的方法对照这看吧addDep(dep: Dep) { const id = dep.id if (!this.newDepIds.has(id)) { this.newDepIds.add(id) // watcher和dep是双向绑定的，会互相存对方 this.newDeps.push(dep) if (!this.depIds.has(id)) { dep.addSub(this) } } }\nupdate() { // 就是调用了一下run // 对lazy会标记dirty,下一次调用getter会真的执行 // 否则认为结果没变，computed watcher会直接返回上次的结果 if (this.lazy) { this.dirty = true } else if (this.sync) { this.run() } else { queueWatcher(this) } }\n其实主要就是调用了一下run，lazy是用来处理computed watcher的懒加载的（标记了dirty=true后，computed就知道自己该修改了；否则，调用getter时会直接返回上次的value不会再计算）。\nrun方法就不具体给出了（想看去源码），具体就是调用get获取了一下新值，再调用callback（对于render watcher，cb是渲染；对于用户自定义watcher，cb是传入的回调函数；computed watcher的cb是空）。\n这个get就比较有意思了，它会重新收集所有的依赖（通过调用getter），并与上次的依赖对比，取消 上次有 但 这次没有 的dep（也就是现在不再依赖它，让它不要再notice了）。总之，dep和watcher是相互存储的，再vue2中通过数组记录，需要经常维护。参考：<br>\n<a data-tooltip-position=\"top\" aria-label=\"https://www.bilibili.com/video/BV1qK42147nm/?spm_id_from=333.999.0.0&amp;vd_source=8bdbe890092d08a3408e6e05fb13ad43\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.bilibili.com/video/BV1qK42147nm/?spm_id_from=333.999.0.0&amp;vd_source=8bdbe890092d08a3408e6e05fb13ad43\" target=\"_self\">3分钟彻底搞懂Vue响应式系统原理 前端开发进阶必看</a>\n[彻底理解Vue中的Watcher、Observer、Dep](# 彻底理解Vue中的Watcher、Observer、Dep)<br>\n<a data-tooltip-position=\"top\" aria-label=\"https://zhuanlan.zhihu.com/p/53220088\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://zhuanlan.zhihu.com/p/53220088\" target=\"_self\">【Vue原理】Watch - 白话版</a><br>\n<a data-tooltip-position=\"top\" aria-label=\"https://juejin.cn/post/6995079895470571551?from=search-suggest\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://juejin.cn/post/6995079895470571551?from=search-suggest\" target=\"_self\">vue源码分析之watcher为何收集dep？</a><br>\n<a data-tooltip-position=\"top\" aria-label=\"https://juejin.cn/post/6844904050966659085\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://juejin.cn/post/6844904050966659085\" target=\"_self\">理清Vue响应式系统中的Watcher和Dep的关系</a>","aliases":[],"inlineTags":["#vue","#ts"],"frontmatterTags":[],"headers":[{"heading":"关于vue的响应式","level":1,"id":"关于vue的响应式"},{"heading":"先从vue2看起","level":3,"id":"先从vue2看起"}],"links":["?query=tag:vue","?query=tag:ts"],"author":"","coverImageURL":"","fullURL":"web学习/关于vue的响应式.html","pathToRoot":"..","attachments":["web学习/attachments/关于vue的响应式-20241118.html"],"createdTime":1731942055039,"modifiedTime":1731945150380,"sourceSize":2920,"sourcePath":"web学习/关于vue的响应式.md","exportPath":"web学习/关于vue的响应式.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"web学习/一些奇怪的js写法.html":{"title":"一些奇怪的js写法","icon":"","description":"!!var:\n将变量转换为bool类型\n~~number:\n将浮点数转换为整数（似乎是向0取整）\nnumber&gt;&gt;&gt;0:\n还是转换为整数，但是对负数比较奇怪（会被解释为无符号而比较大）\n??:\n用于处理空值（null, undifined ）的操作，代替||\n比如0||1返回0,而0??1返回1\na?.b :\n是一个可选链（Optional Chaining）操作符的简写形式。可选链是一种安全地访问对象属性或数组元素的方法，即使它们可能不存在也不会导致运行时错误。\na?.b 等同于 a?.(a.b)，这意味着它会先检查 a 是否存在（即不是 null 或 undefined），如果 a 存在，它才会继续访问 a.b。如果 a 是 null 或 undefined，那么整个表达式的结果就是 undefined，而不是抛出错误。\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"一些奇怪的js写法","level":1,"id":"一些奇怪的js写法"}],"links":[],"author":"","coverImageURL":"","fullURL":"web学习/一些奇怪的js写法.html","pathToRoot":"..","attachments":[],"createdTime":1732716079557,"modifiedTime":1732716602757,"sourceSize":833,"sourcePath":"web学习/一些奇怪的js写法.md","exportPath":"web学习/一些奇怪的js写法.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"web学习/js的字符串和正则.html":{"title":"js的字符串和正则","icon":"","description":"<a href=\".?query=tag:正则表达式\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#正则表达式\">#正则表达式</a>\n想要对一个复制粘贴的字符串实现多行和不转义，最简单的方法是先变成json。\n但是我懒\n`str`\n使用反引号可以多行，但是还是会被转义\nString.raw`str` 使用这个标签函数可以不转义\n但是还有一个问题，那就是字符串里有`的情况还是会有问题，这边建议提前替换掉。//字面量方式，其由包含在斜杠之间的模式组成，如下所示：\nvar re = /ab+c/g;\n//构造函数方式，调用RegExp对象的构造函数，如下所示：\nvar re = new RegExp(\"ab+c\",\"g\");\n注意，第二种方式要注意转义的问题。re.test(str):\n返回bool，表示是否匹配\n一般情况下只要有就返回true\n加入想精确地完全匹配，可以regex = /^hello$/，既开头又结尾，即是完全匹配\nre.exec(str):\n<br><a data-tooltip-position=\"top\" aria-label=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\" target=\"_self\">mdn</a>\n带g会记录lastIndex，可多次循环找完\n比较抽象，建议别用 <br>如果你只是为了判断是否匹配，请使用&nbsp;<a data-tooltip-position=\"top\" aria-label=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\" target=\"_self\"><code></code></a>RegExp.prototype.test()&nbsp;方法代替。\n<br>如果你只是为了找出所有匹配正则表达式的字符串而又不关心捕获组，请使用&nbsp;<a data-tooltip-position=\"top\" aria-label=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match\" target=\"_self\"><code></code></a>String.prototype.match()&nbsp;方法代替。此外，<a data-tooltip-position=\"top\" aria-label=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\" target=\"_self\"><code></code></a>String.prototype.matchAll()&nbsp;允许你对匹配项进行迭代，这有助于简化匹配字符串的多个部分（带有匹配组）。\n<br>如果你只是为了查找在字符串中匹配的索引，请使用&nbsp;<a data-tooltip-position=\"top\" aria-label=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search\" target=\"_self\"><code></code></a>String.prototype.search()&nbsp;方法代替。 match:\n在g情况下返回所有匹配但不分组（建议用matchAll）\n在不带g的情况下等于re.exec\nmatchAll:\n只能带g使用，否则报错\nsearch:\n从头开始，返回第一次的位置，没找到返回-1\n想全找不如matchAll\nreplace:\n","aliases":[],"inlineTags":["#正则表达式"],"frontmatterTags":[],"headers":[{"heading":"js的字符串和正则","level":1,"id":"js的字符串和正则"},{"heading":"正则表达式的构造","level":3,"id":"正则表达式的构造"},{"heading":"re的方法","level":4,"id":"re的方法"},{"heading":"str的方法","level":4,"id":"str的方法"}],"links":["?query=tag:%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F"],"author":"","coverImageURL":"","fullURL":"web学习/js的字符串和正则.html","pathToRoot":"..","attachments":[],"createdTime":1732798798484,"modifiedTime":1732803659120,"sourceSize":2721,"sourcePath":"web学习/js的字符串和正则.md","exportPath":"web学习/js的字符串和正则.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"web学习/js的arguments.html":{"title":"JS的arguments","icon":"","description":"<a href=\".?query=tag:js\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#js\">#js</a>\n在函数内使用arguments获取参数时，arguments是一个类数组对象<br>\n<img src=\"web学习/attachments/js的arguments-20241127.png\" target=\"_self\">\n不具备数组的一些方法，可以通过Array.from()转换为数组。相比之下，...arg返回的就是一个数组<br>\n<img src=\"web学习/attachments/js的arguments-20241127-1.png\" target=\"_self\"><a href=\".?query=tag:js/array\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#js/array\">#js/array</a>\nArray.from()是一个比较有意思的函数，它可以将类数组对象转换为数组。let arrayLike = { 0: 'tom', 1: '65', 2: '男', 3: ['jane','john','Mary'], 'length': 4\n}\nlet arr = Array.from(arrayLike)\nconsole.log(arr) // ['tom','65','男',['jane','john','Mary']]\n所以可以利用它创建数组Array.from({length:5},(v,k)=&gt;k*k)\n第二个参数是map函数","aliases":[],"inlineTags":["#js","#js/array"],"frontmatterTags":[],"headers":[{"heading":"JS的arguments","level":1,"id":"JS的arguments"}],"links":["?query=tag:js","?query=tag:js/array"],"author":"","coverImageURL":"","fullURL":"web学习/js的arguments.html","pathToRoot":"..","attachments":["web学习/attachments/js的arguments-20241127.html","web学习/attachments/js的arguments-20241127-1.html"],"createdTime":1732703332304,"modifiedTime":1732703846756,"sourceSize":723,"sourcePath":"web学习/JS的arguments.md","exportPath":"web学习/js的arguments.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"web学习/worker的性能统计.html":{"title":"worker的性能统计","icon":"","description":"对于1.69G的文件\n<img src=\"web学习/attachments/worker的性能统计-20241126-1.png\" target=\"_self\">\n内部耗时457ms，内存稳定时约占用1.7G。\n外部耗时466ms,可见转移并不耗时。相比直接调用：<br>\n<img src=\"web学习/attachments/worker的性能统计-20241126-2.png\" target=\"_self\">\n可以看到区别不大","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"worker的性能统计","level":1,"id":"worker的性能统计"}],"links":[],"author":"","coverImageURL":"","fullURL":"web学习/worker的性能统计.html","pathToRoot":"..","attachments":["web学习/attachments/worker的性能统计-20241126-1.html","web学习/attachments/worker的性能统计-20241126-2.html"],"createdTime":1732621318699,"modifiedTime":1732622332752,"sourceSize":284,"sourcePath":"web学习/worker的性能统计.md","exportPath":"web学习/worker的性能统计.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"}},"fileInfo":{"site-lib/fonts/94f2f163d4b698242fef.otf":{"createdTime":1728095673385,"modifiedTime":1728095673385,"sourceSize":66800,"sourcePath":"","exportPath":"site-lib/fonts/94f2f163d4b698242fef.otf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/72505e6a122c6acd5471.woff2":{"createdTime":1728095673385,"modifiedTime":1728095673385,"sourceSize":104232,"sourcePath":"","exportPath":"site-lib/fonts/72505e6a122c6acd5471.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/2d5198822ab091ce4305.woff2":{"createdTime":1728095673385,"modifiedTime":1728095673385,"sourceSize":104332,"sourcePath":"","exportPath":"site-lib/fonts/2d5198822ab091ce4305.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/c8ba52b05a9ef10f4758.woff2":{"createdTime":1728095673386,"modifiedTime":1728095673386,"sourceSize":98868,"sourcePath":"","exportPath":"site-lib/fonts/c8ba52b05a9ef10f4758.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/cb10ffd7684cd9836a05.woff2":{"createdTime":1728095673387,"modifiedTime":1728095673387,"sourceSize":106876,"sourcePath":"","exportPath":"site-lib/fonts/cb10ffd7684cd9836a05.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/b5f0f109bc88052d4000.woff2":{"createdTime":1728095673388,"modifiedTime":1728095673388,"sourceSize":105804,"sourcePath":"","exportPath":"site-lib/fonts/b5f0f109bc88052d4000.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/cbe0ae49c52c920fd563.woff2":{"createdTime":1728095673389,"modifiedTime":1728095673389,"sourceSize":106108,"sourcePath":"","exportPath":"site-lib/fonts/cbe0ae49c52c920fd563.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/535a6cf662596b3bd6a6.woff2":{"createdTime":1728095673389,"modifiedTime":1728095673389,"sourceSize":111708,"sourcePath":"","exportPath":"site-lib/fonts/535a6cf662596b3bd6a6.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/70cc7ff27245e82ad414.ttf":{"createdTime":1728095673395,"modifiedTime":1728095673395,"sourceSize":192740,"sourcePath":"","exportPath":"site-lib/fonts/70cc7ff27245e82ad414.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/454577c22304619db035.ttf":{"createdTime":1728095673396,"modifiedTime":1728095673396,"sourceSize":161376,"sourcePath":"","exportPath":"site-lib/fonts/454577c22304619db035.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/52ac8f3034507f1d9e53.ttf":{"createdTime":1728095673390,"modifiedTime":1728095673390,"sourceSize":191568,"sourcePath":"","exportPath":"site-lib/fonts/52ac8f3034507f1d9e53.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/05b618077343fbbd92b7.ttf":{"createdTime":1728095673396,"modifiedTime":1728095673396,"sourceSize":155288,"sourcePath":"","exportPath":"site-lib/fonts/05b618077343fbbd92b7.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/4bb6ac751d1c5478ff3a.woff2":{"createdTime":1728095673383,"modifiedTime":1728095673383,"sourceSize":7876,"sourcePath":"","exportPath":"site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/media/874d8b8e340f75575caa.svg":{"createdTime":1728095673384,"modifiedTime":1728095673384,"sourceSize":317,"sourcePath":"","exportPath":"site-lib/media/874d8b8e340f75575caa.svg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/media/3d6c1bdc4d87cde4de67.svg":{"createdTime":1728095673384,"modifiedTime":1728095673384,"sourceSize":279,"sourcePath":"","exportPath":"site-lib/media/3d6c1bdc4d87cde4de67.svg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/html/file-tree-content.html":{"createdTime":1735826029998,"modifiedTime":1735826029998,"sourceSize":24488,"sourcePath":"","exportPath":"site-lib/html/file-tree-content.html","showInTree":false,"treeOrder":0,"backlinks":[],"type":"html","data":null},"site-lib/scripts/webpage.js":{"createdTime":1728094730597,"modifiedTime":1728094730597,"sourceSize":72357,"sourcePath":"","exportPath":"site-lib/scripts/webpage.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/media/favicon.png":{"createdTime":1728095673376,"modifiedTime":1728095673376,"sourceSize":1105,"sourcePath":"","exportPath":"site-lib/media/favicon.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/styles/obsidian.css":{"createdTime":1735826029880,"modifiedTime":1735826029880,"sourceSize":196200,"sourcePath":"","exportPath":"site-lib/styles/obsidian.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/global-variable-styles.css":{"createdTime":1728095673394,"modifiedTime":1728095673394,"sourceSize":238,"sourcePath":"","exportPath":"site-lib/styles/global-variable-styles.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/main-styles.css":{"createdTime":1728094730618,"modifiedTime":1728094730618,"sourceSize":17291,"sourcePath":"","exportPath":"site-lib/styles/main-styles.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/rss.xml":{"createdTime":1728096794569,"modifiedTime":1728096794569,"sourceSize":729,"sourcePath":"","exportPath":"site-lib/rss.xml","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"c语言学习/attachments/c中的浮点数与类型转换-20240928.jpg":{"createdTime":1727538476223,"modifiedTime":1727538476223,"sourceSize":151080,"sourcePath":"C语言学习/attachments/C中的浮点数与类型转换--20240928.jpg","exportPath":"c语言学习/attachments/c中的浮点数与类型转换-20240928.jpg","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"c语言学习/attachments/c中的浮点数与类型转换-20240928.html":{"createdTime":1727538515262,"modifiedTime":1727538515263,"sourceSize":448744,"sourcePath":"C语言学习/attachments/C中的浮点数与类型转换--20240928.png","exportPath":"c语言学习/attachments/c中的浮点数与类型转换-20240928.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"c语言学习/attachments/c中的浮点数与类型转换-20240928.png":{"createdTime":1727538515262,"modifiedTime":1727538515263,"sourceSize":448744,"sourcePath":"C语言学习/attachments/C中的浮点数与类型转换--20240928.png","exportPath":"c语言学习/attachments/c中的浮点数与类型转换-20240928.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"c语言学习/attachments/c中的浮点数与类型转换-20240928-1.jpg":{"createdTime":1727538490577,"modifiedTime":1727538490578,"sourceSize":292256,"sourcePath":"C语言学习/attachments/C中的浮点数与类型转换--20240928-1.jpg","exportPath":"c语言学习/attachments/c中的浮点数与类型转换-20240928-1.jpg","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"c语言学习/attachments/c中的浮点数与类型转换-20240928-1.html":{"createdTime":1727538490577,"modifiedTime":1727538490578,"sourceSize":292256,"sourcePath":"C语言学习/attachments/C中的浮点数与类型转换--20240928-1.jpg","exportPath":"c语言学习/attachments/c中的浮点数与类型转换-20240928-1.html","showInTree":true,"treeOrder":0,"backlinks":["c语言学习/c中的浮点数与类型转换.html"],"type":"attachment","data":null},"c语言学习/c中的浮点数与类型转换.html":{"createdTime":1727538295885,"modifiedTime":1727962901201,"sourceSize":926,"sourcePath":"C语言学习/C中的浮点数与类型转换.md","exportPath":"c语言学习/c中的浮点数与类型转换.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"c语言学习/c中的字符串.html":{"createdTime":1725546694789,"modifiedTime":1728356597221,"sourceSize":813,"sourcePath":"C语言学习/C中的字符串.md","exportPath":"c语言学习/c中的字符串.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"index.html":{"createdTime":1728014269757,"modifiedTime":1728014288974,"sourceSize":8,"sourcePath":"index.md","exportPath":"index.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"c语言学习/attachments/c调用函数参数入栈顺序-20241015.jpg":{"createdTime":1728994481510,"modifiedTime":1728994481526,"sourceSize":225727,"sourcePath":"C语言学习/attachments/C调用函数参数入栈顺序--20241015.jpg","exportPath":"c语言学习/attachments/c调用函数参数入栈顺序-20241015.jpg","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"c语言学习/attachments/c调用函数参数入栈顺序-20241015.html":{"createdTime":1728994481510,"modifiedTime":1728994481526,"sourceSize":225727,"sourcePath":"C语言学习/attachments/C调用函数参数入栈顺序--20241015.jpg","exportPath":"c语言学习/attachments/c调用函数参数入栈顺序-20241015.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"c语言学习/c调用函数参数入栈顺序.html":{"createdTime":1728992243017,"modifiedTime":1728994482912,"sourceSize":2889,"sourcePath":"C语言学习/C调用函数参数入栈顺序.md","exportPath":"c语言学习/c调用函数参数入栈顺序.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"c语言学习/c语言gcc编译与math.h的问题.html":{"createdTime":1728881053191,"modifiedTime":1728881352243,"sourceSize":365,"sourcePath":"C语言学习/C语言gcc编译与math.h的问题.md","exportPath":"c语言学习/c语言gcc编译与math.h的问题.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux笔记/attachments/关于shell-20241017.png":{"createdTime":1729165478252,"modifiedTime":1729165478252,"sourceSize":345360,"sourcePath":"linux笔记/attachments/关于shell--20241017.png","exportPath":"linux笔记/attachments/关于shell-20241017.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"linux笔记/attachments/关于shell-20241017.html":{"createdTime":1729165478252,"modifiedTime":1729165478252,"sourceSize":345360,"sourcePath":"linux笔记/attachments/关于shell--20241017.png","exportPath":"linux笔记/attachments/关于shell-20241017.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"linux笔记/attachments/进程管理-20241015.png":{"createdTime":1728997519511,"modifiedTime":1728997519512,"sourceSize":330892,"sourcePath":"linux笔记/attachments/进程管理--20241015.png","exportPath":"linux笔记/attachments/进程管理-20241015.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"linux笔记/attachments/进程管理-20241015.html":{"createdTime":1728997519511,"modifiedTime":1728997519512,"sourceSize":330892,"sourcePath":"linux笔记/attachments/进程管理--20241015.png","exportPath":"linux笔记/attachments/进程管理-20241015.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"linux笔记/attachments/特殊权限-20241017.png":{"createdTime":1729160463443,"modifiedTime":1729160463444,"sourceSize":386939,"sourcePath":"linux笔记/attachments/特殊权限--20241017.png","exportPath":"linux笔记/attachments/特殊权限-20241017.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"linux笔记/attachments/特殊权限-20241017.html":{"createdTime":1729160463443,"modifiedTime":1729160463444,"sourceSize":386939,"sourcePath":"linux笔记/attachments/特殊权限--20241017.png","exportPath":"linux笔记/attachments/特殊权限-20241017.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"linux笔记/attachments/文件查看-20241017.png":{"createdTime":1729162018380,"modifiedTime":1729162018380,"sourceSize":343875,"sourcePath":"linux笔记/attachments/文件查看--20241017.png","exportPath":"linux笔记/attachments/文件查看-20241017.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"linux笔记/attachments/文件查看-20241017.html":{"createdTime":1729162018380,"modifiedTime":1729162018380,"sourceSize":343875,"sourcePath":"linux笔记/attachments/文件查看--20241017.png","exportPath":"linux笔记/attachments/文件查看-20241017.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"linux笔记/attachments/arch安装记（无u盘）-20241016.png":{"createdTime":1729092949052,"modifiedTime":1729092949052,"sourceSize":227761,"sourcePath":"linux笔记/attachments/Arch安装记（无U盘）--20241016.png","exportPath":"linux笔记/attachments/arch安装记（无u盘）-20241016.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"linux笔记/attachments/arch安装记（无u盘）-20241016.html":{"createdTime":1729092949052,"modifiedTime":1729092949052,"sourceSize":227761,"sourcePath":"linux笔记/attachments/Arch安装记（无U盘）--20241016.png","exportPath":"linux笔记/attachments/arch安装记（无u盘）-20241016.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"linux笔记/管道重定向.html":{"createdTime":1728998484238,"modifiedTime":1728999004426,"sourceSize":346,"sourcePath":"linux笔记/管道重定向.md","exportPath":"linux笔记/管道重定向.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux笔记/环境变量.html":{"createdTime":1729164183868,"modifiedTime":1729164297283,"sourceSize":151,"sourcePath":"linux笔记/环境变量.md","exportPath":"linux笔记/环境变量.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux笔记/进程管理.html":{"createdTime":1728996672166,"modifiedTime":1728997559312,"sourceSize":471,"sourcePath":"linux笔记/进程管理.md","exportPath":"linux笔记/进程管理.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux笔记/特殊权限.html":{"createdTime":1729159713591,"modifiedTime":1729160517993,"sourceSize":556,"sourcePath":"linux笔记/特殊权限.md","exportPath":"linux笔记/特殊权限.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux笔记/文件查看.html":{"createdTime":1729161770765,"modifiedTime":1729163832867,"sourceSize":2210,"sourcePath":"linux笔记/文件查看.md","exportPath":"linux笔记/文件查看.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux笔记/文件与文件夹的权限.html":{"createdTime":1729049184682,"modifiedTime":1729049545654,"sourceSize":929,"sourcePath":"linux笔记/文件与文件夹的权限.md","exportPath":"linux笔记/文件与文件夹的权限.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux笔记/arch安装记（无u盘）.html":{"createdTime":1729091538265,"modifiedTime":1729094899986,"sourceSize":9886,"sourcePath":"linux笔记/Arch安装记（无U盘）.md","exportPath":"linux笔记/arch安装记（无u盘）.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux笔记/umask.html":{"createdTime":1729049704850,"modifiedTime":1729049711720,"sourceSize":1344,"sourcePath":"linux笔记/umask.md","exportPath":"linux笔记/umask.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"c语言学习/attachments/函数式编程-尾递归优化-20241224.png":{"createdTime":1735044808571,"modifiedTime":1735044808572,"sourceSize":100302,"sourcePath":"C语言学习/attachments/函数式编程-尾递归优化--20241224.png","exportPath":"c语言学习/attachments/函数式编程-尾递归优化-20241224.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"c语言学习/attachments/函数式编程-尾递归优化-20241224.html":{"createdTime":1735044808571,"modifiedTime":1735044808572,"sourceSize":100302,"sourcePath":"C语言学习/attachments/函数式编程-尾递归优化--20241224.png","exportPath":"c语言学习/attachments/函数式编程-尾递归优化-20241224.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"c语言学习/attachments/内存与静态变量-20241214.png":{"createdTime":1734162735965,"modifiedTime":1734162735965,"sourceSize":323620,"sourcePath":"C语言学习/attachments/内存与静态变量--20241214.png","exportPath":"c语言学习/attachments/内存与静态变量-20241214.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"c语言学习/attachments/内存与静态变量-20241214.html":{"createdTime":1734162735965,"modifiedTime":1734162735965,"sourceSize":323620,"sourcePath":"C语言学习/attachments/内存与静态变量--20241214.png","exportPath":"c语言学习/attachments/内存与静态变量-20241214.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"c语言学习/attachments/内存与静态变量-20241214-1.png":{"createdTime":1734162832771,"modifiedTime":1734162832773,"sourceSize":159574,"sourcePath":"C语言学习/attachments/内存与静态变量--20241214-1.png","exportPath":"c语言学习/attachments/内存与静态变量-20241214-1.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"c语言学习/attachments/内存与静态变量-20241214-1.html":{"createdTime":1734162832771,"modifiedTime":1734162832773,"sourceSize":159574,"sourcePath":"C语言学习/attachments/内存与静态变量--20241214-1.png","exportPath":"c语言学习/attachments/内存与静态变量-20241214-1.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"c语言学习/attachments/const与指针-20241203.png":{"createdTime":1733207163940,"modifiedTime":1733207163942,"sourceSize":296583,"sourcePath":"C语言学习/attachments/const与指针--20241203.png","exportPath":"c语言学习/attachments/const与指针-20241203.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"c语言学习/attachments/const与指针-20241203.html":{"createdTime":1733207163940,"modifiedTime":1733207163942,"sourceSize":296583,"sourcePath":"C语言学习/attachments/const与指针--20241203.png","exportPath":"c语言学习/attachments/const与指针-20241203.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"c语言学习/构造函数.html":{"createdTime":1735046980601,"modifiedTime":1735047341537,"sourceSize":860,"sourcePath":"C语言学习/构造函数.md","exportPath":"c语言学习/构造函数.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"c语言学习/函数式编程.html":{"createdTime":1735044772034,"modifiedTime":1735046799909,"sourceSize":2103,"sourcePath":"C语言学习/函数式编程.md","exportPath":"c语言学习/函数式编程.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"c语言学习/结构体的内存对齐.html":{"createdTime":1728992219962,"modifiedTime":1734143180034,"sourceSize":940,"sourcePath":"C语言学习/结构体的内存对齐.md","exportPath":"c语言学习/结构体的内存对齐.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"c语言学习/内存与静态变量.html":{"createdTime":1734162599602,"modifiedTime":1734163719424,"sourceSize":1757,"sourcePath":"C语言学习/内存与静态变量.md","exportPath":"c语言学习/内存与静态变量.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"c语言学习/文件打开mode.html":{"createdTime":1735047475001,"modifiedTime":1735047772575,"sourceSize":1255,"sourcePath":"C语言学习/文件打开mode.md","exportPath":"c语言学习/文件打开mode.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"c语言学习/字符.html":{"createdTime":1733204871677,"modifiedTime":1733206074743,"sourceSize":1056,"sourcePath":"C语言学习/字符.md","exportPath":"c语言学习/字符.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"c语言学习/c的函数指针数组-逆天声明.html":{"createdTime":1734439639017,"modifiedTime":1734439754031,"sourceSize":447,"sourcePath":"C语言学习/C的函数指针数组-逆天声明.md","exportPath":"c语言学习/c的函数指针数组-逆天声明.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"c语言学习/c语言逆天题.html":{"createdTime":1735047388564,"modifiedTime":1735049834061,"sourceSize":1076,"sourcePath":"C语言学习/C语言逆天题.md","exportPath":"c语言学习/c语言逆天题.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"c语言学习/const与指针.html":{"createdTime":1733207039434,"modifiedTime":1733207260321,"sourceSize":1718,"sourcePath":"C语言学习/const与指针.md","exportPath":"c语言学习/const与指针.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux笔记/attachments/设备文件-20241020.png":{"createdTime":1729414466022,"modifiedTime":1729414466023,"sourceSize":377788,"sourcePath":"linux笔记/attachments/设备文件--20241020.png","exportPath":"linux笔记/attachments/设备文件-20241020.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"linux笔记/attachments/设备文件-20241020.html":{"createdTime":1729414466022,"modifiedTime":1729414466023,"sourceSize":377788,"sourcePath":"linux笔记/attachments/设备文件--20241020.png","exportPath":"linux笔记/attachments/设备文件-20241020.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"linux笔记/设备文件.html":{"createdTime":1729414429780,"modifiedTime":1729414957960,"sourceSize":532,"sourcePath":"linux笔记/设备文件.md","exportPath":"linux笔记/设备文件.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux笔记/ansi-转义序列.html":{"createdTime":1729413202464,"modifiedTime":1729413685049,"sourceSize":721,"sourcePath":"linux笔记/ANSI 转义序列.md","exportPath":"linux笔记/ansi-转义序列.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux笔记/dd命令.html":{"createdTime":1729910832743,"modifiedTime":1729910942409,"sourceSize":187,"sourcePath":"linux笔记/dd命令.md","exportPath":"linux笔记/dd命令.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux笔记/diff的用法.html":{"createdTime":1729343024137,"modifiedTime":1729343648329,"sourceSize":301,"sourcePath":"linux笔记/diff的用法.md","exportPath":"linux笔记/diff的用法.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux笔记/docker权限去sudo.html":{"createdTime":1729431139197,"modifiedTime":1729431195453,"sourceSize":201,"sourcePath":"linux笔记/docker权限去sudo.md","exportPath":"linux笔记/docker权限去sudo.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux笔记/shell环境.html":{"createdTime":1729165472054,"modifiedTime":1729915886069,"sourceSize":1248,"sourcePath":"linux笔记/Shell环境.md","exportPath":"linux笔记/shell环境.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux笔记/shell知识.html":{"createdTime":1729913561879,"modifiedTime":1729914770544,"sourceSize":516,"sourcePath":"linux笔记/Shell知识.md","exportPath":"linux笔记/shell知识.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux笔记/vscode调试ts.html":{"createdTime":1729522195375,"modifiedTime":1732863862015,"sourceSize":456,"sourcePath":"linux笔记/Vscode调试ts.md","exportPath":"linux笔记/vscode调试ts.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"react/关于react的响应式.html":{"createdTime":1735020439523,"modifiedTime":1735056276692,"sourceSize":1165,"sourcePath":"React/关于React的响应式.md","exportPath":"react/关于react的响应式.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"react/环境配置.html":{"createdTime":1735056392561,"modifiedTime":1735122155807,"sourceSize":2583,"sourcePath":"React/环境配置.md","exportPath":"react/环境配置.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"react/hooks.html":{"createdTime":1735825154547,"modifiedTime":1735825832884,"sourceSize":600,"sourcePath":"React/Hooks.md","exportPath":"react/hooks.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"react/react-native的textinput.html":{"createdTime":1735825879983,"modifiedTime":1735825921114,"sourceSize":35,"sourcePath":"React/react native的TextInput.md","exportPath":"react/react-native的textinput.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"web学习/attachments/关于vue的响应式-20241118.jpg":{"createdTime":1731942954229,"modifiedTime":1731942954229,"sourceSize":494374,"sourcePath":"web学习/attachments/关于vue的响应式--20241118.jpg","exportPath":"web学习/attachments/关于vue的响应式-20241118.jpg","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"web学习/attachments/关于vue的响应式-20241118.html":{"createdTime":1731942954229,"modifiedTime":1731942954229,"sourceSize":494374,"sourcePath":"web学习/attachments/关于vue的响应式--20241118.jpg","exportPath":"web学习/attachments/关于vue的响应式-20241118.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"web学习/attachments/js的arguments-20241127.png":{"createdTime":1732703428675,"modifiedTime":1732703428675,"sourceSize":22149,"sourcePath":"web学习/attachments/JS的arguments--20241127.png","exportPath":"web学习/attachments/js的arguments-20241127.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"web学习/attachments/js的arguments-20241127.html":{"createdTime":1732703428675,"modifiedTime":1732703428675,"sourceSize":22149,"sourcePath":"web学习/attachments/JS的arguments--20241127.png","exportPath":"web学习/attachments/js的arguments-20241127.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"web学习/attachments/js的arguments-20241127-1.png":{"createdTime":1732703544234,"modifiedTime":1732703544234,"sourceSize":9540,"sourcePath":"web学习/attachments/JS的arguments--20241127-1.png","exportPath":"web学习/attachments/js的arguments-20241127-1.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"web学习/attachments/js的arguments-20241127-1.html":{"createdTime":1732703544234,"modifiedTime":1732703544234,"sourceSize":9540,"sourcePath":"web学习/attachments/JS的arguments--20241127-1.png","exportPath":"web学习/attachments/js的arguments-20241127-1.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"web学习/attachments/worker的性能统计-20241126.png":{"createdTime":1732621411348,"modifiedTime":1732621411348,"sourceSize":54672,"sourcePath":"web学习/attachments/worker的性能统计--20241126.png","exportPath":"web学习/attachments/worker的性能统计-20241126.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"web学习/attachments/worker的性能统计-20241126.html":{"createdTime":1732621411348,"modifiedTime":1732621411348,"sourceSize":54672,"sourcePath":"web学习/attachments/worker的性能统计--20241126.png","exportPath":"web学习/attachments/worker的性能统计-20241126.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"web学习/attachments/worker的性能统计-20241126-1.png":{"createdTime":1732621710008,"modifiedTime":1732621710009,"sourceSize":27970,"sourcePath":"web学习/attachments/worker的性能统计--20241126-1.png","exportPath":"web学习/attachments/worker的性能统计-20241126-1.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"web学习/attachments/worker的性能统计-20241126-1.html":{"createdTime":1732621710008,"modifiedTime":1732621710009,"sourceSize":27970,"sourcePath":"web学习/attachments/worker的性能统计--20241126-1.png","exportPath":"web学习/attachments/worker的性能统计-20241126-1.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"web学习/attachments/worker的性能统计-20241126-2.png":{"createdTime":1732622317488,"modifiedTime":1732622317488,"sourceSize":27481,"sourcePath":"web学习/attachments/worker的性能统计--20241126-2.png","exportPath":"web学习/attachments/worker的性能统计-20241126-2.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"web学习/attachments/worker的性能统计-20241126-2.html":{"createdTime":1732622317488,"modifiedTime":1732622317488,"sourceSize":27481,"sourcePath":"web学习/attachments/worker的性能统计--20241126-2.png","exportPath":"web学习/attachments/worker的性能统计-20241126-2.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"web学习/关于vue的响应式.html":{"createdTime":1731942055039,"modifiedTime":1731945150380,"sourceSize":2920,"sourcePath":"web学习/关于vue的响应式.md","exportPath":"web学习/关于vue的响应式.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"web学习/一些奇怪的js写法.html":{"createdTime":1732716079557,"modifiedTime":1732716602757,"sourceSize":833,"sourcePath":"web学习/一些奇怪的js写法.md","exportPath":"web学习/一些奇怪的js写法.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"web学习/js的字符串和正则.html":{"createdTime":1732798798484,"modifiedTime":1732803659120,"sourceSize":2721,"sourcePath":"web学习/js的字符串和正则.md","exportPath":"web学习/js的字符串和正则.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"web学习/js的arguments.html":{"createdTime":1732703332304,"modifiedTime":1732703846756,"sourceSize":723,"sourcePath":"web学习/JS的arguments.md","exportPath":"web学习/js的arguments.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"web学习/worker的性能统计.html":{"createdTime":1732621318699,"modifiedTime":1732622332752,"sourceSize":284,"sourcePath":"web学习/worker的性能统计.md","exportPath":"web学习/worker的性能统计.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"site-lib/scripts/graph-wasm.wasm":{"createdTime":1735825094663,"modifiedTime":1724542185000,"sourceSize":23655,"sourcePath":"","exportPath":"site-lib/scripts/graph-wasm.wasm","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"site-lib/scripts/graph-wasm.js":{"createdTime":1735825096020,"modifiedTime":1735825096020,"sourceSize":12831,"sourcePath":"","exportPath":"site-lib/scripts/graph-wasm.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/scripts/graph-render-worker.js":{"createdTime":1735825096020,"modifiedTime":1735825096020,"sourceSize":5402,"sourcePath":"","exportPath":"site-lib/scripts/graph-render-worker.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/scripts/tinycolor.js":{"createdTime":1735825096020,"modifiedTime":1735825096020,"sourceSize":29834,"sourcePath":"","exportPath":"site-lib/scripts/tinycolor.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/scripts/pixi.js":{"createdTime":1735825096021,"modifiedTime":1735825096021,"sourceSize":449502,"sourcePath":"","exportPath":"site-lib/scripts/pixi.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/scripts/minisearch.js":{"createdTime":1735825096021,"modifiedTime":1735825096021,"sourceSize":29440,"sourcePath":"","exportPath":"site-lib/scripts/minisearch.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null}},"sourceToTarget":{"C语言学习/attachments/C中的浮点数与类型转换--20240928.jpg":"c语言学习/attachments/c中的浮点数与类型转换-20240928.html","C语言学习/attachments/C中的浮点数与类型转换--20240928.png":"c语言学习/attachments/c中的浮点数与类型转换-20240928.html","C语言学习/attachments/C中的浮点数与类型转换--20240928-1.jpg":"c语言学习/attachments/c中的浮点数与类型转换-20240928-1.html","C语言学习/C中的浮点数与类型转换.md":"c语言学习/c中的浮点数与类型转换.html","C语言学习/C中的字符串.md":"c语言学习/c中的字符串.html","img.py":"img.py","index.md":"index.html","":"site-lib/styles/obsidian.css","C语言学习/attachments/C调用函数参数入栈顺序--20241015.jpg":"c语言学习/attachments/c调用函数参数入栈顺序-20241015.html","C语言学习/未命名.md":"c语言学习/未命名.html","C语言学习/C调用函数参数入栈顺序.md":"c语言学习/c调用函数参数入栈顺序.html","C语言学习/C语言gcc编译与math.h的问题.md":"c语言学习/c语言gcc编译与math.h的问题.html","linux笔记/attachments/关于shell--20241017.png":"linux笔记/attachments/关于shell-20241017.html","linux笔记/attachments/进程管理--20241015.png":"linux笔记/attachments/进程管理-20241015.html","linux笔记/attachments/特殊权限--20241017.png":"linux笔记/attachments/特殊权限-20241017.html","linux笔记/attachments/文件查看--20241017.png":"linux笔记/attachments/文件查看-20241017.html","linux笔记/attachments/Arch安装记（无U盘）--20241016.png":"linux笔记/attachments/arch安装记（无u盘）-20241016.html","linux笔记/关于shell.md":"linux笔记/关于shell.html","linux笔记/管道重定向.md":"linux笔记/管道重定向.html","linux笔记/环境变量.md":"linux笔记/环境变量.html","linux笔记/进程管理.md":"linux笔记/进程管理.html","linux笔记/特殊权限.md":"linux笔记/特殊权限.html","linux笔记/文件查看.md":"linux笔记/文件查看.html","linux笔记/文件与文件夹的权限.md":"linux笔记/文件与文件夹的权限.html","linux笔记/Arch安装记（无U盘）.md":"linux笔记/arch安装记（无u盘）.html","linux笔记/umask.md":"linux笔记/umask.html","C语言学习/attachments/函数式编程-尾递归优化--20241224.png":"c语言学习/attachments/函数式编程-尾递归优化-20241224.html","C语言学习/attachments/内存与静态变量--20241214.png":"c语言学习/attachments/内存与静态变量-20241214.html","C语言学习/attachments/内存与静态变量--20241214-1.png":"c语言学习/attachments/内存与静态变量-20241214-1.html","C语言学习/attachments/const与指针--20241203.png":"c语言学习/attachments/const与指针-20241203.html","C语言学习/构造函数.md":"c语言学习/构造函数.html","C语言学习/函数式编程.md":"c语言学习/函数式编程.html","C语言学习/结构体的内存对齐.md":"c语言学习/结构体的内存对齐.html","C语言学习/内存与静态变量.md":"c语言学习/内存与静态变量.html","C语言学习/文件打开mode.md":"c语言学习/文件打开mode.html","C语言学习/字符.md":"c语言学习/字符.html","C语言学习/C的函数指针数组-逆天声明.md":"c语言学习/c的函数指针数组-逆天声明.html","C语言学习/C语言逆天题.md":"c语言学习/c语言逆天题.html","C语言学习/const与指针.md":"c语言学习/const与指针.html","linux笔记/attachments/设备文件--20241020.png":"linux笔记/attachments/设备文件-20241020.html","linux笔记/设备文件.md":"linux笔记/设备文件.html","linux笔记/ANSI 转义序列.md":"linux笔记/ansi-转义序列.html","linux笔记/dd命令.md":"linux笔记/dd命令.html","linux笔记/diff的用法.md":"linux笔记/diff的用法.html","linux笔记/docker权限去sudo.md":"linux笔记/docker权限去sudo.html","linux笔记/Shell环境.md":"linux笔记/shell环境.html","linux笔记/Shell知识.md":"linux笔记/shell知识.html","linux笔记/Vscode调试ts.md":"linux笔记/vscode调试ts.html","React/关于React的响应式.md":"react/关于react的响应式.html","React/环境配置.md":"react/环境配置.html","React/Hooks.md":"react/hooks.html","React/react native的TextInput.md":"react/react-native的textinput.html","web学习/attachments/关于vue的响应式--20241118.jpg":"web学习/attachments/关于vue的响应式-20241118.html","web学习/attachments/JS的arguments--20241127.png":"web学习/attachments/js的arguments-20241127.html","web学习/attachments/JS的arguments--20241127-1.png":"web学习/attachments/js的arguments-20241127-1.html","web学习/attachments/worker的性能统计--20241126.png":"web学习/attachments/worker的性能统计-20241126.html","web学习/attachments/worker的性能统计--20241126-1.png":"web学习/attachments/worker的性能统计-20241126-1.html","web学习/attachments/worker的性能统计--20241126-2.png":"web学习/attachments/worker的性能统计-20241126-2.html","web学习/关于vue的响应式.md":"web学习/关于vue的响应式.html","web学习/一些奇怪的js写法.md":"web学习/一些奇怪的js写法.html","web学习/js的字符串和正则.md":"web学习/js的字符串和正则.html","web学习/JS的arguments.md":"web学习/js的arguments.html","web学习/worker的性能统计.md":"web学习/worker的性能统计.html"},"featureOptions":{"backlinks":{"featureId":"backlinks","enabled":true,"displayTitle":"Backlinks","featurePlacement":{"selector":".footer","type":"start","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."}},"tags":{"featureId":"tags","enabled":true,"displayTitle":"","featurePlacement":{"selector":".header .data-bar","type":"end","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."},"showInlineTags":{"show":true,"description":"Show tags that are inline in the document"},"showFrontmatterTags":{"show":true,"description":"Show tags that are in the frontmatter"}},"alias":{"featureId":"aliases","enabled":true,"displayTitle":"","featurePlacement":{"selector":".header .data-bar","type":"start","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."}},"properties":{"featureId":"properties","enabled":true,"displayTitle":"Properties","featurePlacement":{"selector":".header","type":"start","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."},"info_hideProperties":{"show":true,"description":"A list of properties to hide from the properties view"}},"fileNavigation":{"featureId":"file-navigation","enabled":true,"displayTitle":"","featurePlacement":{"selector":"#left-sidebar-content","type":"end","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."},"info_includePath":{"show":false,"description":"The path on the server from which this feature can be loaded"},"showDefaultFolderIcons":false,"showDefaultFileIcons":false,"defaultFolderIcon":"lucide//folder","defaultFileIcon":"lucide//file","defaultMediaIcon":"lucide//file-image","exposeStartingPath":true,"info_showDefaultFolderIcons":{"show":true,"description":"Show a default icon of a folder for every folder in the tree"},"info_showDefaultFileIcons":{"show":true,"description":"Show a default icon of a file for every file in the tree"},"info_defaultFolderIcon":{"show":true,"description":"The icon to use for folders. Prefix with 'lucide//' to use a Lucide icon"},"info_defaultFileIcon":{"show":true,"description":"The icon to use for files. Prefix with 'lucide//' to use a Lucide icon"},"info_defaultMediaIcon":{"show":true,"description":"The icon to use for media files. Prefix with 'lucide//' to use a Lucide icon"},"info_exposeStartingPath":{"show":true,"description":"Whether or not to show the current file in the file tree when the page is first loaded"},"includePath":"site-lib/html/file-tree.html"},"search":{"featureId":"search","enabled":true,"displayTitle":"Search...","featurePlacement":{"selector":"#left-sidebar .topbar-content","type":"start","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."}},"outline":{"featureId":"outline","enabled":true,"displayTitle":"Outline","featurePlacement":{"selector":"#right-sidebar-content","type":"end","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."},"startCollapsed":false,"minCollapseDepth":0,"info_startCollapsed":{"show":true,"description":"Should the outline start collapsed?"},"info_minCollapseDepth":{"show":true,"description":"The minimum depth at which headings should be collapsed"}},"themeToggle":{"featureId":"theme-toggle","enabled":true,"displayTitle":"","featurePlacement":{"selector":"#right-sidebar .topbar-content","type":"start","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."}},"graphView":{"featureId":"graph-view","enabled":true,"displayTitle":"Graph View","featurePlacement":{"selector":"#right-sidebar-content","type":"start","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."},"showOrphanNodes":true,"showAttachments":false,"allowGlobalGraph":true,"allowExpand":true,"attractionForce":1,"linkLength":15,"repulsionForce":80,"centralForce":2,"edgePruning":100,"minNodeRadius":3,"maxNodeRadius":7,"info_showOrphanNodes":{"show":true,"description":"Show nodes that are not connected to any other nodes."},"info_showAttachments":{"show":true,"description":"Show attachments like images and PDFs as nodes in the graph."},"info_allowGlobalGraph":{"show":true,"description":"Allow the user to view the global graph of all nodes."},"info_allowExpand":{"show":true,"description":"Allow the user to pop-out the graph view to take up the whole screen"},"info_attractionForce":{"show":true,"description":"How much should linked nodes attract each other? This will make the graph appear more clustered."},"info_linkLength":{"show":true,"description":"How long should the links between nodes be? The shorter the links the closer connected nodes will cluster together."},"info_repulsionForce":{"show":true,"description":"How much should nodes repel each other? This will make the graph appear more spread out."},"info_centralForce":{"show":true,"description":"How much should nodes be attracted to the center? This will make the graph appear more dense and circular."},"info_edgePruning":{"show":true,"description":"Edges with a length above this threshold will not be rendered, however they will still contribute to the simulation. This can help large tangled graphs look more organised. Hovering over a node will still display these links."},"info_minNodeRadius":{"show":true,"description":"How small should the smallest nodes be? The smaller a node is the less it will attract other nodes."},"info_maxNodeRadius":{"show":true,"description":"How large should the largest nodes be? Nodes are sized by how many links they have. The larger a node is the more it will attract other nodes. This can be used to create a good grouping around the most important nodes."}},"sidebar":{"featureId":"sidebar","enabled":true,"allowResizing":true,"allowCollapsing":true,"rightDefaultWidth":"20em","leftDefaultWidth":"20em","info_allowResizing":{"show":true,"description":"Whether or not to allow the sidebars to be resized"},"info_allowCollapsing":{"show":true,"description":"Whether or not to allow the sidebars to be collapsed"},"info_rightDefaultWidth":{"show":true,"description":"The default width of the right sidebar"},"info_leftDefaultWidth":{"show":true,"description":"The default width of the left sidebar"}},"customHead":{"featureId":"custom-head","enabled":true,"displayTitle":"","featurePlacement":{"selector":"head","type":"start","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."},"info_includePath":{"show":false,"description":"The path on the server from which this feature can be loaded"},"sourcePath":"","info_sourcePath":{"show":true,"description":"The local path to the source .html file which will be included.","fileInputOptions":{"browseButton":true}},"includePath":"site-lib/html/custom-head.html"},"document":{"featureId":"obsidian-document","enabled":true,"allowFoldingLists":true,"allowFoldingHeadings":true,"documentWidth":"40em","info_allowFoldingLists":{"show":true,"description":"Whether or not to allow lists to be folded"},"info_allowFoldingHeadings":{"show":true,"description":"Whether or not to allow headings to be folded"},"info_documentWidth":{"show":true,"description":"The width of the document"}}},"modifiedTime":1735826029896,"siteName":"main","vaultName":"main","exportRoot":"/","baseURL":"","pluginVersion":"1.9.0-2b","themeName":"","bodyClasses":"publish css-settings-manager mod-windows theme-light show-inline-title show-ribbon is-focused","hasFavicon":false}